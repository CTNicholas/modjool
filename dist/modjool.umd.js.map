{"version":3,"file":"modjool.umd.js","sources":["../src/modjool/config/config.js","../src/modjool/state.js","../src/modjool/whenready.js","../src/modjool/create.js","../src/modjool/methods/utils.js","../src/modjool/methods/update-attributes.js","../src/modjool/methods/update-slots.js","../src/modjool/methods/update-body.js","../src/modjool/methods/update.js","../src/modjool/methods/changed.js","../src/modjool/methods/proxies.js","../src/modjool/config/keywords.js","../src/modjool/methods/constructor.js","../src/modjool/methods/observe.js","../src/modjool/methods/adopted.js","../src/modjool/methods/connected.js","../src/modjool/methods/disconnected.js","../src/modjool/element.js","../src/modjool/modjool.js","../src/modjool/modjoolLite.js"],"sourcesContent":["/**\r\n * Default options object for modjool.create()\r\n */\r\nexport default {\r\n  tag: 'no-name',\r\n  attr: [],\r\n  shadowDom: false,\r\n  modjoolId: true,\r\n  scopedCss: true,\r\n  unhide: false,\r\n  reactive: true,\r\n  enter: undefined,\r\n  ready: undefined,\r\n  js: undefined,\r\n  complete: undefined,\r\n  leave: undefined,\r\n  html: () => '',\r\n  css: () => '',\r\n}\r\n","import config from './config/config.js'\r\n\r\n/**\r\n * Keeps track of the state of Modjool. New elements are added and removed\r\n * as they are added and removed from the page.\r\n */\r\nexport default {\r\n  config: config,\r\n  warnings: [],\r\n\r\n  classes: [],\r\n  elements: [],\r\n\r\n  /**\r\n   * Adds an element to the elements array\r\n   * @param {ModjoolElement} newElement - The element to be added\r\n   */\r\n  addElement (newElement) {\r\n    this.elements.push(newElement)\r\n  },\r\n\r\n  /**\r\n   * Removes an element from the elements array\r\n   * @param {ModjoolElement} oldElement - The element to be removed\r\n   */\r\n  removeElement (oldElement) {\r\n    this.elements = this.elements.filter(el => el  !== oldElement)\r\n  },\r\n\r\n  /**\r\n   * Returns a list of elements that are  defined, and currently attached to the DOM,\r\n   * that match the elementTag. If no argument, return all currently defined elements\r\n   * @param {String} elementTag - The tag of the custom element\r\n   * @returns {Array} - Array of selected elements\r\n   */\r\n  getElements (elementTag) {\r\n  // noinspection JSIncompatibleTypesComparison\r\n    return elementTag ? this.elements.filter(el => el.mj.tag === elementTag) : this.elements\r\n  }\r\n}\r\n","/**\r\n * Runs func when the entire DOM has loaded\r\n * @param {Function} func - The function to be run\r\n */\r\nexport default function (func) {\r\n  if (document.readyState === 'interactive' || document.readyState === 'complete') {\r\n    func()\r\n  } else {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n      func()\r\n    })\r\n  }\r\n}\r\n","import whenReady from './whenready.js'\r\n\r\n/**\r\n * Defines or creates custom element classes from createElement function.\r\n * Return value wrapped in Promise\r\n *\r\n * If define === true:\r\n *   Create and define custom elements\r\n *   Return result (options object or array of option objects used for Modjool definition)\r\n *\r\n * If define === false:\r\n *   Create custom element classes, but do not define\r\n *   Return result (class or array of classes to be used for custom element definition)\r\n *\r\n * Execution process:\r\n *   1. If options not passed, define all elements not currently defined, return true\r\n *   2. If array passed, define all elements, return array of results\r\n *   3. Else, create single element, if successful, return result\r\n *   4. Return false if problem\r\n *\r\n * @param {Function} createElement - Function to build ModjoolElement or ModjoolLiteElement\r\n * @param {Object|Array|String} options - Options provided by modjool.create()\r\n * @param {Boolean} define - Will define element, and return options if true\r\n * @returns {Promise<Object|Class|Array<Object|Class>|Boolean>} - See above. All 3 processes return false if failed\r\n */\r\nexport default function creator (createElement, options = [], define = true) {\r\n  options = options.length === 1 ? options[0] : options\r\n  if (Array.isArray(options)) {\r\n    if (options.length === 0) {\r\n      return defineAll(createElement)\r\n    }\r\n    const result = []\r\n    for (const option of options) {\r\n      result.push(createSingle(createElement, option, define))\r\n    }\r\n    return Promise.all(result).then(values => {\r\n      const allSuccessful = values.every(res => res !== false)\r\n      return allSuccessful ? values : false\r\n    })\r\n  } else {\r\n    return createSingle(createElement, options, define)\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a single ModjoolElement or ModjoolLiteElement. If a string is passed as options,\r\n * send false to createElement(), to denote a simple API call. If define === true,\r\n * returns the class instead of defining and returning options.\r\n * Return value wrapped in Promise\r\n * @param {Function} createElement - Function to build ModjoolElement or ModjoolLiteElement\r\n * @param {Object|String} options - Options provided by modjool.create()\r\n * @param {Boolean} define - Will define element, and return options if true\r\n * @returns {Promise<Object|Class|false>} - True if successful, false if not\r\n */\r\nfunction createSingle (createElement, options, define = true) {\r\n  const isString = typeof options === 'string' || options instanceof String\r\n  return createElement(options, !isString).then(customElement => {\r\n    if (define !== true) {\r\n      return customElement.class || false\r\n    }\r\n    try {\r\n      customElements.define(customElement.tag, customElement.class)\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n    return customElements.get(customElement.tag) ? customElement.options : false\r\n  })\r\n}\r\n\r\n/**\r\n * Finds all non-defined custom elements, and defines them using createSingle()\r\n * @param {Function} createElement - Function to build ModjoolElement or ModjoolLiteElement\r\n * @returns {Promise} - List of all successfully defined custom element options objects\r\n */\r\nconst definedEls = []\r\nfunction defineAll(createElement) {\r\n  const notDefined = document.querySelectorAll(':not(:defined)')\r\n  const list = []\r\n  for (const el of notDefined) {\r\n    const tag = el.tagName.toLowerCase() || el.nodeName.toLowerCase() || el.localName\r\n    if (!list.includes(tag) && !definedEls.includes(tag)) {\r\n      definedEls.push(tag)\r\n      list.push(tag)\r\n    }\r\n  }\r\n  return new Promise(resolve => {\r\n    whenReady(() => {\r\n      if (list.length) {\r\n        resolve(creator(createElement, list, true))\r\n      } else {\r\n        resolve(false)\r\n      }\r\n    })\r\n  })\r\n}\r\n","/**\r\n * Runs the lifecycle event as specified by apiProp\r\n * Execution process:\r\n *   1. If already running lifecycle, return null\r\n *   2. If new property set, run it and finish\r\n *   3. If property in options, run it, and pass extra properties to instance, if set\r\n *   4. Else (the property has not been set), return null\r\n * @param {ModjoolElement} context\r\n * @param {Object} options - The custom element's options\r\n * @param {String} apiProp - The name of the API property\r\n * @param {Object} extra - Any extra properties to be passed to the API method\r\n * @returns {null|Object} - Null if failed, otherwise function result or {} if no result\r\n */\r\nfunction runLifecycle (context, options, apiProp, extra = false) {\r\n  const { mj } = context\r\n  let result = null\r\n  let alreadyRunningLifecycle = mj.runningLifecycle\r\n\r\n  // If not running during lifecycle, change state\r\n  if (!alreadyRunningLifecycle) {\r\n    mj.runningLifecycle = true\r\n  }\r\n\r\n  // If new replacement lifecycle event has been set, run it\r\n  if (mj.new && mj.new[apiProp] !== null && mj.new[apiProp] !== undefined) {\r\n    result = mj.new[apiProp]() || undefined\r\n  }\r\n\r\n  // Run regular lifecycle, add extra options if needed\r\n  if (result === null && options[apiProp] !== undefined) {\r\n    result = (extra ? options[apiProp]({ ...mj.instance, ...extra }) : options[apiProp](mj.instance)) || undefined\r\n  }\r\n\r\n  // If lifecycle started in this function, complete lifecycle\r\n  if (!alreadyRunningLifecycle) {\r\n    mj.runningLifecycle = false\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Returns a shortcut function for context.querySelector, compatible with\r\n * tagged template literals, and regular strings.\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Boolean} findAll - Optional, return querySelectorAll\r\n * @returns {function(String|Array, ...[String]): *}\r\n */\r\nfunction findFunction (context, options, findAll = false) {\r\n  return function (strings, ...values) {\r\n    const str = buildTemplateString(strings, values)\r\n    return findAll ? context.mj.body.querySelectorAll(str) : context.mj.body.querySelector(str)\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the slot element passed to the function as a tagged template function string\r\n * Return value:\r\n *   If the element has multiple slots:\r\n *     And an argument is used: The slot element with the given name is returned, if it exists\r\n *     No argument is used: A NodeArray of slot elements is returned\r\n *     Otherwise: undefined is returned\r\n *\r\n *   If the element has a single slot (argument always ignored):\r\n *     And the slot has a single containing HTML tag: This element is returned, if it exists\r\n *     The slot has no containing element: undefined is returned\r\n *\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @returns {function(String|Array, ...[String]): *}\r\n */\r\nfunction findSlotFunction (context, options) {\r\n  return function (strings = '', ...values) {\r\n    const str = buildTemplateString(strings, values)\r\n    const slots = context.mj.instance.slot\r\n    const multiSlot = typeof slots === 'object' && slots !== null\r\n\r\n    if (multiSlot) {\r\n      return str.length ? context.querySelector(`[slot=${str}]`) : context.querySelectorAll('[slot]')\r\n    }\r\n\r\n    const shadowElem = context.children[0] || undefined\r\n    const normalElem = context.querySelector('slot > *') || context.querySelector(':first-child') || undefined\r\n    return options.shadowDom ? shadowElem : normalElem\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Converts kebab-case to camelCase\r\n * Uses a cache for speed\r\n * @type {function(*): *}\r\n * @param {String} - String to convert\r\n * @returns {String} - Converted string\r\n */\r\nconst kebabToCamel = kebabCamelCache()\r\n\r\n/**\r\n * Converts camelCase to kebab-case\r\n * Uses a cache for speed\r\n * @type {function(*): *}\r\n * @param {String} - String to convert\r\n * @returns {String} - Converted string\r\n */\r\nconst camelToKebab = kebabCamelCache(true)\r\n\r\nexport { runLifecycle, findFunction, findSlotFunction, kebabToCamel, camelToKebab }\r\n\r\nfunction buildTemplateString (strings, values) {\r\n  let str\r\n  if (typeof strings === 'string' || strings instanceof String) {\r\n    str = strings\r\n  } else {\r\n    // Build template string\r\n    str = strings[0]\r\n    for (let i = 0; i < values.length; i++) {\r\n      str += values[i] + strings[i + 1]\r\n    }\r\n  }\r\n  return str\r\n}\r\n\r\n/**\r\n * Creates a cache of kebab-case to camelCase conversions, and vice-versa\r\n * Returns two functions, one for conversion either way, returning\r\n * from cache if already converted\r\n * @param {Boolean} camelToKebab - If true, convert FROM camel, instead of TO\r\n * @returns {function(*): (*)} -\r\n */\r\nfunction kebabCamelCache (camelToKebab = false) {\r\n  const camelCache = {}\r\n  const kebabCache = {}\r\n\r\n  if (camelToKebab) {\r\n    // camelCase to kebab-case\r\n    return function (str) {\r\n      // Check cache\r\n      if (camelCache[str]) {\r\n        return camelCache[str]\r\n      }\r\n\r\n      // Return str if not camelCase (has any capital letters)\r\n      if (str === str.toLowerCase()) {\r\n        return str\r\n      }\r\n\r\n      // Convert, add to cache, return\r\n      const result = str.replace(/[A-Z]/g, \"-$&\").toLowerCase()\r\n      camelCache[str] = result\r\n      kebabCache[result] = str\r\n      return result\r\n    }\r\n  }\r\n\r\n  // kebab-case to camelCase\r\n  // (quicker than regex in every browser but Firefox)\r\n  return function (str) {\r\n    // Check cache\r\n    if (kebabCache[str]) {\r\n      return kebabCache[str]\r\n    }\r\n\r\n    // Return str if not kebab case (has any hyphens)\r\n    if (!str.includes('-')) {\r\n      return str\r\n    }\r\n\r\n    // Convert, add to cache, return\r\n    const result = str\r\n      .split('-')\r\n      .map((item, index) =>\r\n        index\r\n          ? item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()\r\n          : item.toLowerCase())\r\n      .join(\"\")\r\n    kebabCache[str] = result\r\n    camelCache[result] = str\r\n    return result\r\n  }\r\n}\r\n","import { kebabToCamel } from './utils.js'\r\n\r\n/**\r\n * If element connected, retrieve and set attributes\r\n * Add proxy to attr, to monitor for changes in the modjool API\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction updateAttributes (context, options) {\r\n  if (context.isConnected) {\r\n    context.mj.settingAttributes = true\r\n    context.mj.attributes = {}\r\n    for (let i = 0; i < context.attributes.length; i++) {\r\n      const prop = context.attributes[i].nodeName.toLowerCase()\r\n      if (!prop.toLowerCase().startsWith('mj-')) {\r\n        let val = context.attributes[i].nodeValue\r\n        if (val === '') {\r\n          val = true\r\n        }\r\n        context.mj.attributes[kebabToCamel(prop)] = val\r\n      }\r\n    }\r\n    setAttr(context, options, context.mj.attributes)\r\n    context.mj.settingAttributes = false\r\n  }\r\n}\r\n\r\nexport { updateAttributes }\r\n\r\n/**\r\n * Delete all attributes from attr proxy element, then add new\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} attributes - The new attributes\r\n */\r\nfunction setAttr (context, options, attributes) {\r\n  const attr = context.mj.instance.attr\r\n  for (const prop of Object.keys(attr)) {\r\n    delete attr[prop]\r\n  }\r\n\r\n  for (const [key, val] of Object.entries(attributes)) {\r\n    attr[key] = val\r\n  }\r\n}","/**\r\n * If element connected, get and set slot and slotVal\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction updateSlots (context, options) {\r\n  if (context.isConnected) {\r\n    const { slot, slotVal, slotElem } = getSlotContent(context, options)\r\n    context.mj.instance.slot = slot\r\n    context.mj.instance.slotVal = slotVal\r\n    context.mj.instance.slotElem = slotElem\r\n  }\r\n}\r\n\r\nexport { updateSlots }\r\n\r\n/**\r\n * Gets slot and slotVal content. If multiple slots, return an object with\r\n * slot names as properties. Only top-level elements returned as slots.\r\n * Explained:\r\n *   slot: HTML required to output the current slot in html() or css()\r\n *   slotVal: The HTML content of the slot as a string\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @returns {Object} - slot & slotVal content\r\n */\r\nfunction getSlotContent (context, options) {\r\n  let slot\r\n  let slotVal\r\n  let slotElem\r\n  const tempId = 'mj-8Wi7fiDtPtAWMhLQop1Smg'\r\n  context.mj.bodyContent = context.mj.bodyContent.trim()\r\n  const bodyFrag = createElement(context.mj.bodyContent, tempId)\r\n  const slotList = bodyFrag.querySelectorAll(`#${tempId} > [slot]`)\r\n\r\n  if (slotList.length > 0) {\r\n    // Multiple slots\r\n    slot = {}\r\n    slotVal = {}\r\n    slotElem = {}\r\n\r\n    for (const s of slotList) {\r\n      const slotName = s.getAttribute('slot')\r\n      slotVal[slotName] = s.innerHTML\r\n      slot[slotName] = options.shadowDom ? `<slot name=\"${slotName}\"></slot>` : s.outerHTML\r\n    }\r\n\r\n  } else {\r\n    // Single slot\r\n    const hasContent = context.mj.bodyContent.length\r\n    const shadowSlot = hasContent ? '<slot></slot>' : ''\r\n    const normalSlot = hasContent ? `<slot>${context.mj.bodyContent}</slot>` : context.mj.bodyContent\r\n    slotVal = context.mj.bodyContent\r\n    slot = options.shadowDom ? shadowSlot : normalSlot\r\n  }\r\n  return { slot, slotVal, slotElem }\r\n}\r\n\r\n/**\r\n * Create an document fragment containing a specified element, and returns it,\r\n * contained in a div element with the ID specified\r\n * @param {String} htmlString - innerHTML of element\r\n * @param {String} id - ID of parent element\r\n * @returns {DocumentFragment} - Fragment containing parsed htmlString\r\n */\r\nfunction createElement (htmlString, id = '') {\r\n  const frag = document.createDocumentFragment()\r\n  const elem = document.createElement('div')\r\n  elem.innerHTML = htmlString\r\n  elem.id = id\r\n  frag.appendChild(elem)\r\n  return frag\r\n}\r\n","/**\r\n * Updates custom element's html and css, if it has changed\r\n * If update request sent while currently running lifecycle event,\r\n * return, and wait for it to finish.\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Boolean} ignoreLifecycle - Ignore running lifecycle and force update\r\n */\r\nfunction updateBody (context, options, ignoreLifecycle = false) {\r\n  if (context.isConnected && (!context.mj.runningLifecycle || ignoreLifecycle)) {\r\n    const newHtml = getHtml(context, options)\r\n    const newCss = getCss(context, options)\r\n    const newBody = newHtml + newCss\r\n\r\n    if (newBody !== context.mj.currentBody) {\r\n      let bodyFrag = document.createDocumentFragment()\r\n      addHtml(bodyFrag, newHtml)\r\n      addCss(bodyFrag, newCss, context, options)\r\n\r\n      deleteElementHtml(context.mj.body)\r\n      context.mj.body.appendChild(bodyFrag)\r\n      context.mj.currentBody = newBody\r\n    }\r\n  }\r\n}\r\n\r\nexport { updateBody }\r\n\r\n/**\r\n * Adds HTML to document fragment\r\n * @param {DocumentFragment} bodyFrag\r\n * @param {String} newHtml\r\n */\r\nfunction addHtml (bodyFrag, newHtml) {\r\n  if (newHtml) {\r\n    const tempEl = document.createElement('template')\r\n    tempEl.innerHTML = newHtml\r\n    bodyFrag.appendChild(tempEl.content)\r\n  }\r\n}\r\n\r\n/**\r\n * Adds CSS to document fragment, in a style tag, with custom mj-id\r\n * @param {DocumentFragment} bodyFrag\r\n * @param {String} newCss\r\n * @param {ModjoolElement} context\r\n * @param {Boolean} scopedCss\r\n */\r\nfunction addCss (bodyFrag, newCss, context, { scopedCss }) {\r\n  if (newCss) {\r\n    const cssTag = document.createElement('style')\r\n    cssTag.setAttribute('id', `mj-style-${context.mj.id}`)\r\n    cssTag.textContent = scopedCss ? addSelector(context.mj.instance.self.select, newCss) : newCss\r\n    bodyFrag.appendChild(cssTag)\r\n  }\r\n}\r\n\r\n/**\r\n * Gets HTML for custom element, and returns\r\n * Returns self.html() if set, then HTML hook, then body content\r\n * @param {ModjoolElement} context\r\n * @param {Function} html\r\n * @returns {String} - updated HTML\r\n */\r\nfunction getHtml (context, { html }) {\r\n  if (context.mj.new.html) {\r\n    return context.mj.new.html({ ...context.mj.instance })\r\n  }\r\n  return html({ ...context.mj.instance }) || context.mj.bodyContent\r\n}\r\n\r\n/**\r\n * Gets CSS for custom element, and returns\r\n * Returns self.css() if set, then CSS hook, then style content\r\n * @param {ModjoolElement} context\r\n * @param {Object} options\r\n * @param {Function} options.css\r\n * @returns {String} - The updated CSS\r\n */\r\nfunction getCss (context, { css }) {\r\n  if (context.mj.new.css) {\r\n    return context.mj.new.css ({ ...context.mj.instance })\r\n  }\r\n  return css({ ...context.mj.instance }) || context.mj.styleContent\r\n}\r\n\r\n/**\r\n * Removes all HTML from element (quicker than innerHTML = '')\r\n * @param {Node} body\r\n */\r\nfunction deleteElementHtml (body) {\r\n  while (body.firstChild) {\r\n    body.removeChild(body.firstChild)\r\n  }\r\n}\r\n\r\n/**\r\n * Adds custom element selector to css and returns\r\n * @param {Function}  selfSelect - CSS selector function for self\r\n * @param {String} css - CSS to change\r\n * @returns {String} - The updated CSS\r\n */\r\nfunction addSelector (selfSelect, css) {\r\n  const selectorRegex = /(?!.*@media)[\\t ]*([a-zA-Z#.:*[][^{/]*\\s*){[\\s\\S]*?}/gm\r\n  return css.replace(selectorRegex, (match, part) => {\r\n    const split = part.trimStart().split(',')\r\n    match = match.trimStart()\r\n    const result = doCommaLoop(selfSelect, match, split)\r\n    return result.join(', ') + match.slice(part.length)\r\n  })\r\n}\r\n\r\n/**\r\n * Loops through selectors, adds self selector to each css selector\r\n * @param {Function} selfSelect\r\n * @param {String} match - Matched regex\r\n * @param {Array} split - Matched regex split into selectors\r\n * @returns {Array} - Updated selectors\r\n */\r\nfunction doCommaLoop (selfSelect, match, split) {\r\n  for (const str in split) {\r\n    const regex = /:self\\(([^\\s]*)\\)/im\r\n    const regRes = split[str].match(regex)\r\n    if (regRes) {\r\n      split[str] = split[str].replace(regRes[0], selfSelect(regRes[1]))\r\n    } else if (split[str].includes(':self')) {\r\n      split[str] = split[str].replace(':self', selfSelect())\r\n    } else {\r\n      split[str] = `${selfSelect()} ${split[str]}`\r\n    }\r\n  }\r\n  return split\r\n}\r\n","import { updateAttributes } from './update-attributes.js'\r\nimport { updateSlots } from './update-slots.js'\r\nimport { updateBody } from './update-body.js'\r\n\r\n/**\r\n * Update element's attributes, slots, and body\r\n * @param {...any} args\r\n * @param {ModjoolElement} args[0] - The custom element\r\n * @param {Object} args[1] - The custom element's options\r\n * @param {Boolean} args[2] - Ignore running lifecycle and force update\r\n */\r\nfunction updateAll (...args) {\r\n  updateAttributes(...args)\r\n  updateSlots(...args)\r\n  updateBody(...args)\r\n}\r\n\r\n/**\r\n * Updates mj.new properties, and then updates body\r\n * apiProp corresponds to the API property name, and newVal its new value\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} vals - Object containing new values\r\n */\r\nfunction updateNew (context, options, vals) {\r\n  for (const [apiProp, newVal] of Object.entries(vals)) {\r\n    // noinspection JSUnresolvedVariable\r\n    context.mj.new[apiProp] = newVal\r\n    updateBody(context, options)\r\n  }\r\n}\r\n\r\nexport { updateAttributes, updateSlots, updateBody, updateAll, updateNew }\r\n","import { runLifecycle, kebabToCamel } from './utils.js'\r\nimport { updateBody, updateAttributes } from './update.js'\r\n\r\n/**\r\n * Gets current attributes, runs attribute lifecycle function, and updates body\r\n * Runs complete lifecycle function afterwards\r\n * \r\n * Runs when attributeChangedCallback is called, and an observed attribute is changed\r\n * \r\n * @param {ModjoolElement} context - The custom element to update\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} attr \r\n * @param {String} attr.attrName - Changed attribute name\r\n * @param {String} attr.oldVal - Old attribute value\r\n * @param {String} attr.newVal - New attribute value\r\n */\r\nfunction advanced (context, options, { attrName, oldVal = '', newVal = '' }) {\r\n  const args = [context, options]\r\n  if (context.mj.loaded === true && oldVal !== newVal) {\r\n    const lifecycleName = 'attr_' + kebabToCamel(attrName)\r\n    updateAttributes(...args)\r\n    runLifecycle(context, options, lifecycleName, { oldVal, newVal })\r\n    if (!context.mj.runningLifecycle) {\r\n      updateBody(...args)\r\n      runLifecycle(...args, 'complete')\r\n    }\r\n  }\r\n}\r\n\r\nfunction simple () {}\r\n\r\nexport default { advanced, simple }\r\n","import { updateBody } from './update-body.js'\r\nimport { camelToKebab, runLifecycle } from './utils.js'\r\nimport attributeChanged from './changed.js'\r\n\r\n/**\r\n * Returns a new Proxy element, with a set proxy, attached to proxyObj\r\n * When proxyObj's value changed, set value of this element's corresponding attribute\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} proxyObj - The current attribute values\r\n */\r\nfunction attrProxy (context, options, proxyObj = {}) {\r\n  return new Proxy(proxyObj, {\r\n    set (obj, prop, value) {\r\n      if (!context.mj.settingAttributes) {\r\n        context.setAttribute(camelToKebab(prop), value)\r\n      }\r\n      return Reflect.set(...arguments)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Returns a new Proxy element, with a set proxy, attached to proxyObj\r\n * When proxyObj's value changed, if not running lifecycle:\r\n *  - Get result of dataDataNameHook\r\n *  - Set if value returned, otherwise use value\r\n *  - Update the body\r\n *  - Run complete() lifecycle event\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} proxyObj - The current attribute values\r\n */\r\nfunction dataProxy (context, options, proxyObj = {}) {\r\n  return new Proxy(proxyObj, {\r\n    set (obj, prop, value) {\r\n      if (context.mj.dataInit) {\r\n        return Reflect.set(...arguments)\r\n      }\r\n      const dataHookVal = runLifecycle(context, options, 'data_' + prop, {\r\n        oldVal: obj[prop],\r\n        newVal: value\r\n      })\r\n\r\n      let result\r\n\r\n      // Only sets if not null or undefined\r\n      if (dataHookVal != null) {\r\n        result = Reflect.set(obj, prop, dataHookVal)\r\n      } else {\r\n        result = Reflect.set(...arguments)\r\n      }\r\n\r\n      if (!context.mj.runningLifecycle) {\r\n        updateBody(context, options)\r\n        runLifecycle(context, options, 'complete')\r\n      }\r\n      return result\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Returns an observing MutationObserver that passes\r\n * attributes changed to the default advanced element handler\r\n * for attributeChangedCallback.\r\n *\r\n * MutationObserver only watches for attribute changes to the\r\n * context element, and not changes to its children or other events.\r\n *\r\n * Limitation: MutationObserver is async; reactive attributes still called\r\n * within complete() due do this.\r\n *\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @returns {MutationObserver} - The observing MutationObserver\r\n */\r\nfunction attrObserver (context, options) {\r\n  const observer = new MutationObserver(mutationList => {\r\n    mutationList.forEach(mutation => {\r\n      if (mutation.type === 'attributes' && context.mj.loaded) {\r\n        if (!mutation.attributeName.startsWith('mj-')) {\r\n        attributeChanged.advanced(context, options, {\r\n          attrName: mutation.attributeName,\r\n          oldVal: mutation.oldValue,\r\n          newVal: context.getAttribute(mutation.attributeName)\r\n        })\r\n        }\r\n      }\r\n    })\r\n  })\r\n\r\n  // Start observing\r\n  observer.observe(context, {\r\n    // Watch for attribute change\r\n    attributes: true,\r\n    // Save old values\r\n    attributeOldValue: true\r\n  })\r\n\r\n  return observer\r\n}\r\n\r\nexport { dataProxy, attrProxy, attrObserver }\r\n","/**\r\n * Blocked keywords, not allowed as custom HTML attributes\r\n */\r\nexport default [\r\n  'tag',\r\n  // 'attr',\r\n  'shadowDom',\r\n  'reactive',\r\n  'modjoolId',\r\n  'unhide',\r\n  'scopedCss',\r\n  'enter',\r\n  'data',\r\n  'ready',\r\n  'js',\r\n  'complete',\r\n  'leave',\r\n  'html',\r\n  'css',\r\n]\r\n","import { updateBody, updateSlots, updateAll, updateNew, updateAttributes } from './update.js'\r\nimport { attrObserver, attrProxy, dataProxy } from './proxies'\r\nimport { runLifecycle, findFunction, findSlotFunction } from './utils.js'\r\nimport keywords from '../config/keywords.js'\r\n\r\n/**\r\n * Initialises the custom element's mj property, builds shadow DOM,\r\n * then runs enter() lifecycle event\r\n *\r\n * Runs when the custom element's constructor is called\r\n *\r\n * Properties of mj to note:\r\n *   - body, refers to the shadow DOM (if enabled), or the current element\r\n *   - instance, the object sent to the modjool custom element hooks\r\n *     - Includes attr, data, func, self, slot, slotVal\r\n *     - Self contains a number of methods relating to the current body of the element\r\n *   - new, if new API values have been manually set for the element, they are here\r\n *\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction advanced (context, options) {\r\n  const instanceId = Math.random().toString(36).slice(-6)\r\n  const selector = function (rule = '') {\r\n    if (options.shadowDom) {\r\n      return `:host(${options.tag}[mj-id=\"${instanceId}\"]${rule})`\r\n    } else {\r\n      return `${options.tag}[mj-id=\"${instanceId}\"]${rule}`\r\n    }\r\n  }\r\n  // noinspection JSUnusedGlobalSymbols\r\n  context.mj = {\r\n    tag: options.tag,\r\n    id: instanceId,\r\n    attributes: {},\r\n    observer: {},\r\n    body: {},\r\n    bodyContent: '',\r\n    styleContent: '',\r\n    currentBody: '',\r\n    runningLifecycle: false,\r\n    settingAttributes: false,\r\n    loaded: false,\r\n    reactiveAttributes: options.attributes,\r\n    instance: {\r\n      attr: {},\r\n      data: {},\r\n      elem: {},\r\n      find: findFunction(context, options),\r\n      findAll: findFunction(context, options, true),\r\n      findSlot: findSlotFunction(context, options),\r\n      self: {\r\n        id: instanceId,\r\n        tag: options.tag,\r\n        options: options,\r\n        select: selector,\r\n        element: {},\r\n        update: () => {\r\n          updateBody(context, options, true)\r\n          if (!context.mj.runningLifecycle) {\r\n            runLifecycle(context, options, 'complete')\r\n          }\r\n        },\r\n        updateSlot: () => updateSlots(context, options),\r\n        updateAttr: () => updateAttributes(context, options),\r\n        updateAll: () => {\r\n          updateAll(context, options, true)\r\n          if (!context.mj.runningLifecycle) {\r\n            runLifecycle(context, options, 'complete')\r\n          }\r\n        },\r\n        remove: () => context.mj.body.host ? context.mj.body.host.remove() : context.mj.body.remove(),\r\n        css: css => updateNew(context, options, { css }),\r\n        data: data => updateNew(context, options, { data }),\r\n        enter: enter => updateNew(context, options, { enter }),\r\n        html: html => updateNew(context, options, { html }),\r\n        js: js => updateNew(context, options, { js }),\r\n        complete: complete => updateNew(context, options, { complete }),\r\n        leave: leave => updateNew(context, options, { leave }),\r\n        ready: ready => updateNew(context, options, { ready }),\r\n        attrHook: (attrName, func) => {\r\n          // If custom attribute set, and no custom attr observed, then create\r\n          if (!options.attr.length && !context.mj.observer) {\r\n            context.mj.observer = attrObserver(context, options)\r\n          }\r\n          updateNew(context, options, { ['attr_' + attrName]: func })\r\n        },\r\n        dataHook: (dataName, func) => {\r\n          updateNew(context, options, { ['data_' + dataName]: func })\r\n        }\r\n      },\r\n      slot: {},\r\n      slotVal: {}\r\n    },\r\n    new: {\r\n      css: null,\r\n      data: null,\r\n      enter: null,\r\n      html: null,\r\n      js: null,\r\n      leave: null,\r\n      ready: null,\r\n    },\r\n    options: options\r\n  }\r\n\r\n  // Create reactive features\r\n  if (options.reactive) {\r\n    // Create attr & data instance param proxies\r\n    context.mj.instance.attr = attrProxy(context, options, {})\r\n    context.mj.instance.data = dataProxy(context, options, {})\r\n\r\n    // Create attribute MutationObserver if reactive attr not set manually\r\n    if (!options.attr.length && optionsContainsCustomHook(options)) {\r\n      context.mj.observer = attrObserver(context, options)\r\n    }\r\n  }\r\n\r\n  // Create shadow DOM, if enabled\r\n  if (options.shadowDom) {\r\n    context.attachShadow({ mode: 'open' })\r\n    context.mj.body = context.shadowRoot\r\n  } else {\r\n    context.mj.body = context\r\n  }\r\n\r\n  // If shadow DOM, set self.element to the host (the element containing the shadow DOM)\r\n  context.mj.instance.self.element = context.mj.body.host ? context.mj.body.host : context.mj.body\r\n  context.mj.instance.elem = context.mj.instance.self.element\r\n\r\n  // Constructor complete, run \"enter\" lifecycle\r\n  context.mj.constructorRun = true\r\n  runLifecycle(context, options, 'enter')\r\n}\r\n\r\nfunction simple () {}\r\n\r\nexport default { advanced, simple }\r\n\r\nfunction optionsContainsCustomHook (options) {\r\n  for (const option of Object.keys(options)) {\r\n    if (!keywords.includes(option)) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n","import keywords from '../config/keywords.js'\r\n\r\n/**\r\n * If attributes set in options, retrieve and pass to browser for observation\r\n * Runs when observedAttributes is called, before element construction\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @returns {Array} - Array of observed attributes\r\n */\r\nfunction advanced (context, options) {\r\n  if (options.attr !== undefined) {\r\n    return options.attr.map(attr => {\r\n      attr = attr.toLowerCase()\r\n      if (!keywords.includes(attr)) {\r\n        return attr\r\n      } else {\r\n        console.error(`[Modjool] ERROR: Keyword used as element attribute name [${attr}]`)\r\n      }\r\n    })\r\n  } else {\r\n    return []\r\n  }\r\n}\r\n\r\nfunction simple () {}\r\n\r\nexport default { advanced, simple }\r\n","import { runLifecycle } from './utils.js'\r\nimport { updateBody } from './update-body.js'\r\n\r\n/**\r\n * Runs js() lifecycle event, if it exists, with an extra property indicating it has been adopted\r\n * Then run complete()\r\n * Runs when adoptedCallback has been called, and element has been moved to another document\r\n * @param {ModjoolElement} context - The custom element to update\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction advanced (context, options) {\r\n  if (runLifecycle(context, options, 'js', { adopted: true }) !== null) {\r\n    updateBody(context, options)\r\n  }\r\n  runLifecycle(context, options, 'complete')\r\n}\r\n\r\nfunction simple () { }\r\n\r\nexport default { advanced, simple }\r\n","import state from '../state.js'\r\nimport { runLifecycle } from './utils.js'\r\nimport { updateBody, updateSlots, updateAttributes } from './update.js'\r\n\r\n/**\r\n * Initialises the custom element, after it's added to the page\r\n * Runs when connectedCallback is called, and element is added to DOM\r\n * \r\n * Execution process:\r\n *   1. Wait for parents to be defined\r\n *   2. Get attributes, slots, data\r\n *   3. Run ready() lifecycle event, and update body (get html() and css())\r\n *   4. Unhide element if enabled, context.mj.loaded = true\r\n *   5. If js() used, run js() lifecycle event if given, then update body again\r\n *   6. Run complete() lifecycle event\r\n *   7. Add to defined elements, and dispatch mj-defined custom event\r\n * \r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction advanced (context, options) {\r\n  const args = [context, options]\r\n  if (!context.mj.alreadyConnected) {\r\n    context.mj.alreadyConnected = true\r\n\r\n    if (!options.shadowDom) {\r\n      waitForParentElements(context, () => connectToDom())\r\n    } else {\r\n      connectToDom()\r\n    }\r\n\r\n    function connectToDom () {\r\n      context.mj.bodyContent = context.innerHTML\r\n      initPrivateId(...args)\r\n\r\n      updateAttributes(...args)\r\n      updateSlots(...args)\r\n      setData(...args, (context.mj.new && context.mj.new.data) || runLifecycle(context, options, 'data') || {})\r\n      runLifecycle(context, options, 'ready')\r\n      updateBody(...args)\r\n\r\n      unhideElement(...args)\r\n      context.mj.loaded = true\r\n\r\n      runLifecycle(context, options, 'js')\r\n      runReactiveHooks(context, options)\r\n      updateBody(context, options)\r\n\r\n      runLifecycle(context, options, 'complete')\r\n      state.addElement(context)\r\n      context.dispatchEvent(new Event('mj-defined'))\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Adds element to list of elements, dispatches mj-defined custom event\r\n * Runs when simple element is connected to DOM\r\n * @param {ModjoolElement} context - the custom element to update\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction simple (context, options) {\r\n  context.mj = {}\r\n  context.mj.tag = options.tag\r\n  state.addElement(context)\r\n  context.dispatchEvent(new Event('mj-defined'))\r\n}\r\n\r\nexport default { advanced, simple }\r\n\r\n/**\r\n * Runs all attr_[name] and data_[prop] functions, in that order\r\n * Updates data properties if value returned\r\n * @param {ModjoolElement} context - the custom element to update\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction runReactiveHooks (context, options) {\r\n  if (context.mj.instance) {\r\n    context.mj.runningLifecycle = true\r\n    runAttr()\r\n    runData()\r\n    context.mj.runningLifecycle = false\r\n  }\r\n\r\n  // Iterate through attributes, run lifecycle for each\r\n  function runAttr () {\r\n    for (let name in context.mj.attributes) {\r\n      const lifecycleName = 'attr_' + name\r\n      const attrValue = context.mj.attributes[name]\r\n      runLifecycle(context, options, lifecycleName, {\r\n        newVal: attrValue\r\n      })\r\n    }\r\n  }\r\n\r\n  // Iterate through data properties, run lifecycle for each, set new value\r\n  function runData () {\r\n    context.mj.dataInit = true\r\n    for (let prop in context.mj.instance.data) {\r\n      const lifecycleName = 'data_' + prop\r\n      const dataValue = context.mj.instance.data[prop]\r\n      const dataHookVal  = runLifecycle(context, options, lifecycleName, {\r\n        newVal: dataValue\r\n      })\r\n\r\n      // Only sets if not null or undefined\r\n      if (dataHookVal != null) {\r\n        context.mj.instance.data[prop] = dataHookVal\r\n      }\r\n    }\r\n    context.mj.dataInit = false\r\n  }\r\n}\r\n\r\n/**\r\n * Iterates through data and sets the same values to mj.instance.data\r\n * @param {ModjoolElement} context - the custom element to update\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} data - The new data value\r\n */\r\nfunction setData (context, options, data) {\r\n  if (data === null) {\r\n    return null\r\n  }\r\n\r\n  context.mj.dataInit = true\r\n  for (const [prop, val] of Object.entries(data)) {\r\n    context.mj.instance.data[prop] = val\r\n  }\r\n  context.mj.dataInit = false\r\n}\r\n\r\n/**\r\n * Waits for parent elements to define themselves, before running func.\r\n * Execution process:\r\n *   1. If constructor already run, continue, else do nothing and finish\r\n *   2. If element has any non-defined custom element parents, run func and finish\r\n *   3. Add mj-defined custom event to non-defined parent element\r\n *   4. When parent executes mj-defined, recursively check for more parents\r\n *   5. Repeat until finish\r\n * @param {ModjoolElement} context\r\n * @param {Function} func - Function to be run when ready\r\n */\r\nfunction waitForParentElements (context, func) {\r\n  if (context.mj.constructorRun) {\r\n    try {\r\n      const closest = context.closest(':not(:defined)')\r\n      if (closest === null) {\r\n        func()\r\n      } else {\r\n        const definedFunc = () => {\r\n          // Check for more non-defined elements\r\n          waitForParentElements(context, func)\r\n          // When called, remove this listener from newly defined parent\r\n          closest.removeEventListener('mj-defined', definedFunc)\r\n        }\r\n        // Wait for parent element to be defined, then call definedFunc\r\n        closest.addEventListener('mj-defined', definedFunc)\r\n      }\r\n    } catch (err) {\r\n      // If warning not already logged\r\n      if (!state.warnings.includes(':defined') && err.toString().includes(':defined')) {\r\n        state.warnings.push(':defined')\r\n        console.warn('[Modjool] Browser does not support :defined CSS selector, possible custom element nesting bugs')\r\n        func()\r\n      } else {\r\n        console.error(err)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * If options.id is true, set mj-id attribute to context.mj.id value\r\n * @param {ModjoolElement} context\r\n * @param {Object} options\r\n */\r\nfunction initPrivateId (context, options) {\r\n  if (options.modjoolId) {\r\n    context.setAttribute('mj-id', context.mj.id)\r\n  }\r\n}\r\n\r\n/**\r\n * If options.unhide is true, unhide object by removing hidden attribute\r\n * @param {ModjoolElement} context \r\n * @param {Object} options \r\n */\r\nfunction unhideElement (context, options) {\r\n  if (options.unhide) {\r\n    context.removeAttribute('hidden')\r\n  }\r\n}\r\n","import state from '../state.js'\r\nimport { runLifecycle } from './utils.js'\r\n\r\n/**\r\n * Runs the leave() lifecycle event, empties body & mj, removes element from state\r\n * Runs when disconnectedCallback is called, and element is removed from DOM\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction advanced (context, options) {\r\n  runLifecycle(context, options, 'leave')  \r\n  context.mj.body.innerHTML = ''\r\n  if (context.mj.observer && context.mj.observer.disconnect) {\r\n    context.mj.observer.disconnect()\r\n  }\r\n  state.removeElement(context)\r\n}\r\n\r\n/**\r\n * Removes element from state\r\n * Runs when disconnectedCallback is called, and element is removed from DOM\r\n * @param {ModjoolElement} context - The custom element to update\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction simple (context, options) {\r\n state.removeElement(context)\r\n}\r\n\r\nexport default { advanced, simple }\r\n","import state from './state.js'\r\nimport whenReady from './whenready'\r\n\r\nimport CONSTRUCTOR from './methods/constructor.js'\r\nimport OBSERVE from './methods/observe.js'\r\nimport ADOPTED from './methods/adopted.js'\r\nimport CHANGED from './methods/changed.js'\r\nimport CONNECTED from './methods/connected.js'\r\nimport DISCONNECTED from './methods/disconnected.js'\r\n\r\n/**\r\n * Creates a ModjoolElement class, and returns the class.\r\n * All methods call either an advanced or simple function, depending on type.\r\n * @param {Object|String} options - Options for this element, a tag name string if simple\r\n * @param {Boolean} advancedApi - True if advanced API used, false if not\r\n * @returns {Object} - The defined class, tag, and options\r\n */\r\nfunction elementCreator (options, advancedApi) {\r\n  const elementType = advancedApi ? 'advanced' : 'simple'\r\n  \r\n  // noinspection JSUnusedGlobalSymbols\r\n  class ModjoolElement extends HTMLElement {\r\n    // Invoked instantly\r\n    constructor (...args) {\r\n      // noinspection all\r\n      const polyfill = super(...args)\r\n      this.mj = {}\r\n      CONSTRUCTOR[elementType](this, options)\r\n      return polyfill\r\n    }\r\n\r\n    // Invoked directly after constructor\r\n    static get observedAttributes () {\r\n      return OBSERVE[elementType](this, options)\r\n    }\r\n\r\n    // Invoked when observed attribute is changed\r\n    attributeChangedCallback (attrName, oldVal, newVal) {\r\n      CHANGED[elementType](this, options, { attrName, oldVal, newVal })\r\n    }\r\n\r\n    // Invoked when element added to DOM\r\n    connectedCallback () {\r\n      CONNECTED[elementType](this, options)\r\n    }\r\n\r\n    // Invoked when element moved to new document\r\n    adoptedCallback () {\r\n      ADOPTED[elementType](this, options)\r\n    }\r\n\r\n    // Invoked when element removed from DOM\r\n    disconnectedCallback () {\r\n      DISCONNECTED[elementType](this, options)\r\n      this.mj = {}\r\n    }\r\n  }\r\n\r\n  // noinspection JSUnresolvedVariable\r\n  return {\r\n    tag: advancedApi ? options.tag : options,\r\n    options: options,\r\n    class: ModjoolElement\r\n  }\r\n}\r\n\r\n/**\r\n * Combines options with default, waits until page is ready, then runs elementCreator\r\n * @param {Boolean} advancedApi - True if advanced API used, false if not\r\n * @param {Object|String} options - Options for this element, a tag name string if simple\r\n * @returns {Object} - The defined class, tag, and options\r\n */\r\nexport default function (options, advancedApi) {\r\n  if (advancedApi) {\r\n    options = { ...state.config, ...options }\r\n  }\r\n\r\n  // return elementCreator(options, advancedApi)\r\n  // noinspection JSUnusedLocalSymbols\r\n  return new Promise((resolve, reject) => {\r\n    whenReady(() => {\r\n      resolve(elementCreator(options, advancedApi))\r\n    })\r\n  })\r\n}\r\n","import state from './state.js'\r\nimport createElement from './create.js'\r\nimport ModjoolElement from './element.js'\r\n\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default {\r\n  create,\r\n  createClass,\r\n  createUndefined,\r\n  options, \r\n  get, \r\n  getAsync, \r\n  getUndefined, \r\n  getUndefinedAsync,\r\n  complete,\r\n  wait\r\n}\r\n\r\n/**\r\n * Creates and defines one or more Modjool elements, using the advanced or simple API\r\n * Returns options object, or array of options objects\r\n * @param  {...Array|Object|String} options - One of four inputs:\r\n *   1. An array of objects for the advanced API\r\n *   2. An array of strings for the simple API\r\n *   3. A single object for the advanced API\r\n *   4. A single string for the simple API\r\n * @returns {Promise<Object|Array<Object>>} - Options object(s)\r\n */\r\nfunction create (...options) {\r\n  return createElement(ModjoolElement, options, true)\r\n}\r\n\r\n/**\r\n * Creates classes for one or more Modjool elements, using the advanced or simple API\r\n * Returns ModjoolElement class, or array of ModjoolElement classes\r\n * Return value wrapped in Promise\r\n * Returned class can be used in customElements.define:\r\n *\r\n * modjool.createClass('tag-name').then(modjoolClass => {\r\n *   customElements.define('tag-name', modjoolClass)\r\n * }\r\n * @param  {...Array|Object|String} options - One of four inputs:\r\n *   1. An array of objects for the advanced API\r\n *   2. An array of strings for the simple API\r\n *   3. A single object for the advanced API\r\n *   4. A single string for the simple API\r\n * @returns {Promise<Class|Array<Class>>} - ModjoolElement class\r\n */\r\nfunction createClass (...options) {\r\n  return createElement(ModjoolElement, options, false)\r\n}\r\n\r\n/**\r\n * Defines all non-defined custom elements\r\n * @returns {Promise<Boolean>} - True\r\n */\r\nfunction createUndefined () {\r\n  return createElement(ModjoolElement, [], true)\r\n}\r\n\r\n/**\r\n * Set the default options for all following modjool.create() calls. Options are merged\r\n * with the default options.\r\n * @param {Object} defaults - Options to apply\r\n * @returns {Object} - The current options, after merging\r\n */\r\nfunction options (defaults) {\r\n  state.config = { ...state.config,  ...defaults }\r\n  return state.config\r\n}\r\n\r\n/**\r\n * Returns a list of elements that are  defined, and currently attached to the DOM,\r\n * that match the elementTag. If no argument, return all currently defined elements\r\n * @param {String} className - The tag of the custom element\r\n * @returns {Array} - Array of selected elements\r\n */\r\nfunction get (className = '') {\r\n  return state.getElements(className)\r\n}\r\n\r\n/**\r\n * Returns a promise, resolving with the result of modjool.get(), after all custom\r\n * elements have loaded to the DOM\r\n * @param {String} className - The tag of the custom element\r\n * @returns {Promise<Array>} - Promise resolving with the array of selected elements\r\n */\r\nfunction getAsync (className) {\r\n  return wait().then(() => get(className))\r\n}\r\n\r\n/**\r\n * Returns a list of all currently undefined elements\r\n * @returns {NodeList} - A non-live NodeList containing all matched elements\r\n */\r\nfunction getUndefined () {\r\n  return document.querySelectorAll(':not(:defined)')\r\n}\r\n\r\n/**\r\n * Returns a promise, resolving with the result of modjool.getUndefined(), after all\r\n * custom elements have loaded to the DOM\r\n * @returns {Promise<NodeList>} - Promise resolving with the array of selected elements\r\n */\r\nfunction getUndefinedAsync () {\r\n  return wait().then(() => getUndefined())\r\n}\r\n\r\n/**\r\n * Runs func after all Modjool elements have loaded\r\n * @param {Function} func - Function to run\r\n */\r\nfunction complete (func) {\r\n  wait().then(() => func())\r\n}\r\n\r\n/**\r\n * Returns a promise that waits until all Modjool elements have been loaded, then resolves\r\n * @returns {Promise} - Promise that resolves when Modjool loaded\r\n */\r\nfunction wait () {\r\n  // noinspection JSUnusedLocalSymbols\r\n  return new Promise((resolve, reject) => {\r\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\r\n      setTimeout(() => {\r\n        resolve()\r\n      }, 0)\r\n    } else {\r\n      document.addEventListener('DOMContentLoaded', () => {\r\n        setTimeout(() => {\r\n          resolve()\r\n        }, 1)\r\n      })\r\n    }\r\n  })\r\n}\r\n","/* global customElements, HTMLElement */\r\nimport createElement from './create.js'\r\n\r\nexport default { create }\r\n\r\n/**\r\n * Creates one or more ModjoolLite elements, using the ModjoolLite API\r\n * @param  {...Array|String} options - One of two inputs:\r\n *   1. An array of strings for the simple API\r\n *   2. A single string for the simple API\r\n * @returns {Boolean} - True if successful, false if not\r\n */\r\nfunction create (...options) {\r\n  return createElement(modjoolLiteElement, options)    \r\n}\r\n\r\n/**\r\n * Creates and defines a ModjoolLite element\r\n * @param {String} elementName - The tag of the custom element\r\n * @returns {Object} - The defined class, tag, and options\r\n */\r\nfunction modjoolLiteElement (elementName) {\r\n  // noinspection JSUnusedLocalSymbols\r\n  class ModjoolLiteElement extends HTMLElement {\r\n    constructor (...args) {\r\n      // noinspection all\r\n      return super(...args)\r\n    }\r\n  }\r\n  return {\r\n    tag: elementName,\r\n    options: elementName,\r\n    class: ModjoolLiteElement\r\n  }\r\n}\r\n"],"names":["config","tag","attr","shadowDom","modjoolId","scopedCss","unhide","reactive","enter","undefined","ready","js","complete","leave","html","css","warnings","classes","elements","addElement","newElement","push","removeElement","oldElement","this","filter","el","getElements","elementTag","mj","func","document","readyState","addEventListener","creator","createElement","options","define","length","Array","isArray","defineAll","result","option","createSingle","Promise","all","then","values","every","res","isString","String","customElement","class","customElements","err","console","error","get","definedEls","notDefined","querySelectorAll","list","tagName","toLowerCase","nodeName","localName","includes","resolve","whenReady","runLifecycle","context","apiProp","extra","alreadyRunningLifecycle","runningLifecycle","new","instance","findFunction","findAll","strings","str","buildTemplateString","body","querySelector","findSlotFunction","slots","slot","multiSlot","shadowElem","children","normalElem","kebabToCamel","kebabCamelCache","camelToKebab","i","camelCache","kebabCache","replace","split","map","item","index","charAt","toUpperCase","slice","join","updateAttributes","isConnected","settingAttributes","attributes","prop","startsWith","val","nodeValue","Object","keys","entries","key","setAttr","updateSlots","slotVal","slotElem","tempId","bodyContent","trim","slotList","htmlString","id","frag","createDocumentFragment","elem","innerHTML","appendChild","s","slotName","getAttribute","outerHTML","hasContent","shadowSlot","normalSlot","getSlotContent","updateBody","ignoreLifecycle","newHtml","getHtml","newCss","getCss","newBody","currentBody","bodyFrag","addHtml","addCss","deleteElementHtml","tempEl","content","selfSelect","selectorRegex","cssTag","setAttribute","textContent","self","select","match","part","trimStart","regex","regRes","doCommaLoop","styleContent","firstChild","removeChild","updateNew","vals","newVal","advanced","attrName","oldVal","args","loaded","lifecycleName","simple","attrObserver","observer","MutationObserver","mutationList","forEach","mutation","type","attributeName","attributeChanged","oldValue","observe","attributeOldValue","instanceId","Math","random","toString","reactiveAttributes","data","find","findSlot","rule","element","update","updateSlot","updateAttr","updateAll","remove","host","attrHook","dataHook","dataName","Proxy","set","obj","value","Reflect","arguments","attrProxy","dataInit","dataHookVal","dataProxy","keywords","optionsContainsCustomHook","attachShadow","mode","shadowRoot","constructorRun","adopted","alreadyConnected","connectToDom","initPrivateId","setData","removeAttribute","unhideElement","runAttr","runData","name","attrValue","dataValue","runReactiveHooks","state","dispatchEvent","Event","waitForParentElements","closest","definedFunc","removeEventListener","warn","disconnect","advancedApi","reject","elementType","ModjoolElement","HTMLElement","constructor","polyfill","super","CONSTRUCTOR","OBSERVE","attributeChangedCallback","CHANGED","connectedCallback","CONNECTED","adoptedCallback","ADOPTED","disconnectedCallback","DISCONNECTED","elementCreator","create","createClass","createUndefined","defaults","getAsync","className","wait","getUndefined","getUndefinedAsync","setTimeout","modjoolLiteElement","elementName","ModjoolLiteElement"],"mappings":"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"}