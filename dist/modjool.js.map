{"version":3,"file":"modjool.js","sources":["../src/modjool/config/config.js","../src/modjool/state.js","../src/modjool/whenready.js","../src/modjool/create.js","../src/modjool/methods/utils.js","../src/modjool/methods/update-attributes.js","../src/modjool/methods/update-slots.js","../src/modjool/methods/update-body.js","../src/modjool/methods/update.js","../src/modjool/methods/changed.js","../src/modjool/methods/proxies.js","../src/modjool/methods/functions.js","../src/modjool/config/keywords.js","../src/modjool/methods/constructor.js","../src/modjool/methods/observe.js","../src/modjool/methods/adopted.js","../src/modjool/methods/connected.js","../src/modjool/methods/disconnected.js","../src/modjool/element.js","../src/modjool/modjool.js"],"sourcesContent":["/**\r\n * Default options object for modjool.create()\r\n */\r\nexport default {\r\n  tag: 'no-name',\r\n  attr: [],\r\n  shadowDom: false,\r\n  modjoolId: true,\r\n  scopedCss: true,\r\n  unhide: false,\r\n  reactive: true,\r\n  enter: undefined,\r\n  ready: undefined,\r\n  js: undefined,\r\n  complete: undefined,\r\n  leave: undefined,\r\n  html: () => '',\r\n  css: () => '',\r\n}\r\n","import config from './config/config.js'\r\n\r\n/**\r\n * Keeps track of the state of Modjool. New elements are added and removed\r\n * as they are added and removed from the page.\r\n */\r\nexport default {\r\n  config: config,\r\n  warnings: [],\r\n\r\n  classes: [],\r\n  elements: [],\r\n\r\n  /**\r\n   * Adds an element to the elements array\r\n   * @param {ModjoolElement} newElement - The element to be added\r\n   */\r\n  addElement (newElement) {\r\n    this.elements.push(newElement)\r\n  },\r\n\r\n  /**\r\n   * Removes an element from the elements array\r\n   * @param {ModjoolElement} oldElement - The element to be removed\r\n   */\r\n  removeElement (oldElement) {\r\n    this.elements = this.elements.filter(el => el  !== oldElement)\r\n  },\r\n\r\n  /**\r\n   * Returns a list of elements that are  defined, and currently attached to the DOM,\r\n   * that match the elementTag. If no argument, return all currently defined elements\r\n   * @param {String} elementTag - The tag of the custom element\r\n   * @returns {Array} - Array of selected elements\r\n   */\r\n  getElements (elementTag) {\r\n    return elementTag ? this.elements.filter(el => el.mj.tag === elementTag) : this.elements\r\n  }\r\n}\r\n","/**\r\n * Runs func when the entire DOM has loaded\r\n * @param {Function} func - The function to be run\r\n */\r\nexport default function (func) {\r\n  if (document.readyState === 'interactive' || document.readyState === 'complete') {\r\n    return func()\r\n  } else {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n      return func()\r\n    })\r\n  }\r\n}\r\n","import whenReady from './whenready.js'\r\n/**\r\n * Creates one, or a number, of custom elements, using createElement\r\n * Execution process:\r\n *   1. If options not passed, define all elements not currently defined, return true\r\n *   2. If array passed, define all elements, return array of html tags\r\n *   3. Else, create single element, if successful, return custom html tag\r\n * @param {HTMLElement} createElement - ModjoolElement or ModjoolLiteElement\r\n * @param {Object|Array|String} options - Options provided by modjool.create()\r\n * @returns {Boolean|Array|String} - See above. All 3 processes return false if failed\r\n */\r\nexport default function (createElement, options = []) {\r\n  options = options.length === 1 ? options[0] : options\r\n  if (Array.isArray(options)) {\r\n    if (options.length === 0) {\r\n      return whenReady(() => defineAll(createElement)) || false\r\n    }\r\n    const result = []\r\n    for (const option of options) {\r\n      result.push(createSingle(createElement, option))\r\n    }\r\n    return result.every(res => res === true) ? options : false\r\n  } else {\r\n    return createSingle(createElement, options) ? options.tag : false\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a single ModjoolElement or ModjoolLiteElement. If a string is passed as options,\r\n * send false to createElement(), to denote a simple API call.\r\n * @param {HTMLElement} createElement  - ModjoolElement or ModjoolLiteElement\r\n * @param {Object|String} options - Options provided by modjool.create()\r\n * @returns {Boolean} - True if successful, false if not\r\n */\r\nfunction createSingle (createElement, options) {\r\n  const isString = typeof options === 'string' || options instanceof String\r\n  return createElement(options, !isString)\r\n}\r\n\r\n/**\r\n * Finds all non-defined custom elements, and defines them using createSingle()\r\n * @param {HTMLElement} createElement  - ModjoolElement or ModjoolLiteElement\r\n * @returns {Array} - List of all successfully defined custom element tag names\r\n */\r\nfunction defineAll(createElement) {\r\n  const notDefined = document.querySelectorAll(':not(:defined)')\r\n  const list = []\r\n  for (const el of notDefined) {\r\n    if (!list.includes(el.tagName)) {\r\n      createSingle(createElement, el.tagName.toLowerCase() || el.nodeName.toLowerCase() ||el.localName)\r\n      list.push(el.tagName)\r\n    }\r\n  }\r\n  return list\r\n}\r\n","/**\r\n * Runs the lifecycle event as specified by apiProp\r\n * Execution process:\r\n *   1. If already running lifecycle, return null\r\n *   2. If new property set, run it and finish\r\n *   3. If property in options, run it, and pass extra properties to instance, if set\r\n *   4. Else (the property has not been set), return null\r\n * @param {ModjoolElement} context\r\n * @param {Object} context.mj - The custom element's mj property\r\n * @param {Object} options - The custom element's options\r\n * @param {String} apiProp - The name of the API property\r\n * @param {Object} extra - Any extra properties to be passed to the API method\r\n * @returns {null|Object} - Null if failed, otherwise function result or {} if no result\r\n */\r\nfunction runLifecycle ({ mj }, options, apiProp, extra = false) {\r\n  let result = null\r\n  let alreadyRunningLifecycle = mj.runningLifecycle\r\n\r\n  // If not running during lifecycle, change state\r\n  if (!alreadyRunningLifecycle) {\r\n    mj.runningLifecycle = true\r\n  }\r\n\r\n  // If new replacement lifecycle event has been set, run it\r\n  if (mj.new && mj.new[apiProp] !== null && mj.new[apiProp] !== undefined) {\r\n    result = mj.new[apiProp]() || undefined\r\n  }\r\n\r\n  // Run regular lifecycle, add extra options if needed\r\n  if (result === null && options[apiProp] !== undefined) {\r\n    result = (extra ? options[apiProp]({ ...mj.instance, ...extra }) : options[apiProp](mj.instance)) || undefined\r\n  }\r\n\r\n  // If lifecycle started in this function, complete lifecycle\r\n  if (!alreadyRunningLifecycle) {\r\n    mj.runningLifecycle = false\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Returns a shortcut function for context.querySelector, compatible with\r\n * tagged template literals, and regular strings.\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Boolean} findAll - Optional, return querySelectorAll\r\n * @returns {function(String|Array, ...[String]): *}\r\n */\r\nfunction findFunction (context, options, findAll = false) {\r\n  return function (strings, ...values) {\r\n    let str\r\n    if (typeof strings === 'string' || strings instanceof String) {\r\n      str = strings\r\n    } else {\r\n      // Build template string\r\n      str = strings[0]\r\n      for (let i = 0; i < values.length; i++) {\r\n        str += values[i] + strings[i + 1]\r\n      }\r\n    }\r\n    return findAll ? context.mj.body.querySelectorAll(str) : context.mj.body.querySelector(str)\r\n  }\r\n}\r\n\r\n/**\r\n * Converts kebab-case to camelCase\r\n * Uses a cache for speed\r\n * @type {function(*): *}\r\n * @param {String} - String to convert\r\n * @returns {String} - Converted string\r\n */\r\nconst kebabToCamel = kebabCamelCache()\r\n\r\n/**\r\n * Converts camelCase to kebab-case\r\n * Uses a cache for speed\r\n * @type {function(*): *}\r\n * @param {String} - String to convert\r\n * @returns {String} - Converted string\r\n */\r\nconst camelToKebab = kebabCamelCache(true)\r\n\r\nexport { runLifecycle, findFunction, kebabToCamel, camelToKebab }\r\n\r\n/**\r\n * Creates a cache of kebab-case to camelCase conversions, and vice-versa\r\n * Returns two functions, one for conversion either way, returning\r\n * from cache if already converted\r\n * @param {Boolean} camelToKebab - If true, convert FROM camel, instead of TO\r\n * @returns {function(*): (*)} -\r\n */\r\nfunction kebabCamelCache (camelToKebab = false) {\r\n  const camelCache = {}\r\n  const kebabCache = {}\r\n\r\n  if (camelToKebab) {\r\n    // camelCase to kebab-case\r\n    return function (str) {\r\n      // Check cache\r\n      if (camelCache[str]) {\r\n        return camelCache[str]\r\n      }\r\n\r\n      // Return str if not camelCase (has any capital letters)\r\n      if (str === str.toLowerCase()) {\r\n        return str\r\n      }\r\n\r\n      // Convert, add to cache, return\r\n      const result = str.replace(/[A-Z]/g, \"-$&\").toLowerCase()\r\n      camelCache[str] = result\r\n      kebabCache[result] = str\r\n      return result\r\n    }\r\n  }\r\n\r\n  // kebab-case to camelCase\r\n  // (quicker than regex in every browser but Firefox)\r\n  return function (str) {\r\n    // Check cache\r\n    if (kebabCache[str]) {\r\n      return kebabCache[str]\r\n    }\r\n\r\n    // Return str if not kebab case (has any hyphens)\r\n    if (!str.includes('-')) {\r\n      return str\r\n    }\r\n\r\n    // Convert, add to cache, return\r\n    const result = str\r\n      .split('-')\r\n      .map((item, index) =>\r\n        index\r\n          ? item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()\r\n          : item.toLowerCase())\r\n      .join(\"\")\r\n    kebabCache[str] = result\r\n    camelCache[result] = str\r\n    return result\r\n  }\r\n}","import { kebabToCamel } from './utils.js'\r\n\r\n/**\r\n * If element connected, retrieve and set attributes\r\n * Add proxy to attr, to monitor for changes in the modjool API\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction updateAttributes (context, options) {\r\n  if (context.isConnected) {\r\n    context.mj.settingAttributes = true\r\n    context.mj.attributes = {}\r\n    for (let i = 0; i < context.attributes.length; i++) {\r\n      const prop = context.attributes[i].nodeName.toLowerCase()\r\n      if (!prop.toLowerCase().startsWith('mj-')) {\r\n        let val = context.attributes[i].nodeValue\r\n        if (val === '') {\r\n          val = true\r\n        }\r\n        context.mj.attributes[kebabToCamel(prop)] = val\r\n      }\r\n    }\r\n    setAttr(context, options, context.mj.attributes)\r\n    context.mj.settingAttributes = false\r\n  }\r\n}\r\n\r\nexport { updateAttributes }\r\n\r\n/**\r\n * Delete all attributes from attr proxy element, then add new\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} attributes - The new attributes\r\n */\r\nfunction setAttr (context, options, attributes) {\r\n  const attr = context.mj.instance.attr\r\n  for (const prop of Object.keys(attr)) {\r\n    delete attr[prop]\r\n  }\r\n\r\n  for (const [key, val] of Object.entries(attributes)) {\r\n    attr[key] = val\r\n  }\r\n}","/**\r\n * If element connected, get and set slot and slotVal\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction updateSlots (context, options) {\r\n  if (context.isConnected) {\r\n    const { slot, slotVal } = getSlotContent(context, options)\r\n    context.slotConnected = true\r\n    context.mj.instance.slot = slot\r\n    context.mj.instance.slotVal = slotVal\r\n  }\r\n}\r\n\r\nexport { updateSlots }\r\n\r\n/**\r\n * Gets slot and slotVal content. If multiple slots, return an object with \r\n * slot names as properties. Only top-level elements returned as slots.\r\n * Explained:\r\n *   slot: HTML required to output the current slot in html() or css()\r\n *   slotVal: The HTML content of the slot as a string\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @returns {Object} - slot & slotVal content\r\n */\r\nfunction getSlotContent (context, options) {\r\n  let slot\r\n  let slotVal\r\n  const tempId = 'mj-8Wi7fiDtPtAWMhLQop1Smg'\r\n  const bodyFrag = createElement(context.mj.bodyContent, tempId)\r\n  const slotList = bodyFrag.querySelectorAll(`#${tempId} > [slot]`)\r\n\r\n  if (slotList.length > 0) {\r\n    // Multiple slots\r\n    slot = {}\r\n    slotVal = {}\r\n\r\n    for (const s of slotList) {\r\n      const slotName = s.getAttribute('slot')\r\n      slotVal[slotName] = s.innerHTML\r\n      slot[slotName] = options.shadowDom ? `<slot name=\"${slotName}\"></slot>` : s.outerHTML\r\n    }\r\n\r\n  } else {\r\n    // Single slot\r\n    const shadowSlot = context.mj.bodyContent.length ? '<slot></slot>' : ''\r\n    slotVal = context.mj.bodyContent\r\n    slot = options.shadowDom ? shadowSlot : context.mj.bodyContent\r\n  }\r\n  return { slot, slotVal }\r\n}\r\n\r\n/**\r\n * Create an document fragment containing a specified element, and returns it,\r\n * contained in a div element with the ID specified\r\n * @param {String} htmlString - innerHTML of element\r\n * @param {String} id - ID of parent element\r\n * @returns {DocumentFragment} - Fragment containing parsed htmlString\r\n */\r\nfunction createElement (htmlString, id = '') {\r\n  const frag = document.createDocumentFragment()\r\n  const elem = document.createElement('div')\r\n  elem.innerHTML = htmlString\r\n  elem.id = id\r\n  frag.appendChild(elem)\r\n  return frag\r\n}\r\n","/**\r\n * Updates custom element's html and css, if it has changed\r\n * If update request sent while currently running lifecycle event,\r\n * return, and wait for it to finish.\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Boolean} ignoreLifecycle - Ignore running lifecycle and force update\r\n */\r\nfunction updateBody (context, options, ignoreLifecycle = false) {\r\n  if (context.isConnected && (!context.mj.runningLifecycle || ignoreLifecycle)) {\r\n    const newHtml = getHtml(context, options)\r\n    const newCss = getCss(context, options)\r\n    const newBody = newHtml + newCss\r\n\r\n    if (newBody !== context.mj.currentBody) {\r\n      let bodyFrag = document.createDocumentFragment()\r\n      addHtml(bodyFrag, newHtml)\r\n      addCss(bodyFrag, newCss, context, options)\r\n\r\n      deleteElementHtml(context.mj.body)\r\n      context.mj.body.appendChild(bodyFrag)\r\n      context.mj.currentBody = newBody\r\n    }\r\n  }\r\n}\r\n\r\nexport { updateBody }\r\n\r\n/**\r\n * Adds HTML to document fragment\r\n * @param {DocumentFragment} bodyFrag\r\n * @param {String} newHtml\r\n */\r\nfunction addHtml (bodyFrag, newHtml) {\r\n  if (newHtml) {\r\n    const tempEl = document.createElement('template')\r\n    tempEl.innerHTML = newHtml\r\n    bodyFrag.appendChild(tempEl.content)\r\n  }\r\n}\r\n\r\n/**\r\n * Adds CSS to document fragment, in a style tag, with custom mj-id\r\n * @param {DocumentFragment} bodyFrag\r\n * @param {String} newCss\r\n * @param {ModjoolElement} context\r\n * @param {Boolean} scopedCss\r\n */\r\nfunction addCss (bodyFrag, newCss, context, { scopedCss }) {\r\n  if (newCss) {\r\n    const cssTag = document.createElement('style')\r\n    cssTag.setAttribute('id', `mj-style-${context.mj.id}`)\r\n    cssTag.textContent = scopedCss ? addSelector(context.mj.instance.self.select, newCss) : newCss\r\n    bodyFrag.appendChild(cssTag)\r\n  }\r\n}\r\n\r\n/**\r\n * Gets HTML for custom element, and returns\r\n * Returns self.html() if set, then HTML hook, then body content\r\n * @param {ModjoolElement} context\r\n * @param {Function} html\r\n * @returns {String} - updated HTML\r\n */\r\nfunction getHtml (context, { html }) {\r\n  if (context.mj.new.html) {\r\n    return context.mj.new.html({ ...context.mj.instance })\r\n  }\r\n  return html({ ...context.mj.instance }) || context.mj.bodyContent\r\n}\r\n\r\n/**\r\n * Gets CSS for custom element, and returns\r\n * Returns self.css() if set, then CSS hook, then style content\r\n * @param {ModjoolElement} context\r\n * @param {Object} options\r\n * @param {Function} options.css\r\n * @returns {String} - The updated CSS\r\n */\r\nfunction getCss (context, { css }) {\r\n  if (context.mj.new.css) {\r\n    return context.mj.new.css ({ ...context.mj.instance })\r\n  }\r\n  return css({ ...context.mj.instance }) || context.mj.styleContent\r\n}\r\n\r\n/**\r\n * Removes all HTML from element (quicker than innerHTML = '')\r\n * @param {Node} body\r\n */\r\nfunction deleteElementHtml (body) {\r\n  while (body.firstChild) {\r\n    body.removeChild(body.firstChild)\r\n  }\r\n}\r\n\r\n/**\r\n * Adds custom element selector to css and returns\r\n * @param {String}  selfSelect - CSS selector for self\r\n * @param {String} css - CSS to change\r\n * @returns {String} - The updated CSS\r\n */\r\nfunction addSelector (selfSelect, css) {\r\n  const selectorRegex = /(?!.*@media)[\\t ]*([a-zA-Z#.:*[][^{/]*\\s*){[\\s\\S]*?}/gm\r\n  return css.replace(selectorRegex, (match, part) => {\r\n    const split = part.trimStart().split(',')\r\n    match = match.trimStart()\r\n    const result = doCommaLoop(selfSelect, match, split)\r\n    return result.join(', ') + match.slice(part.length)\r\n  })\r\n}\r\n\r\n/**\r\n * Loops through selectors, adds self selector to each css selector\r\n * @param {Function} selfSelect\r\n * @param {String} match - Matched regex\r\n * @param {Array} split - Matched regex split into selectors\r\n * @returns {Array} - Updated selectors\r\n */\r\nfunction doCommaLoop (selfSelect, match, split) {\r\n  for (const str in split) {\r\n    const regex = /:self\\(([^\\s]*)\\)/im\r\n    const regRes = split[str].match(regex)\r\n    if (regRes) {\r\n      split[str] = split[str].replace(regRes[0], selfSelect(regRes[1]))\r\n    } else if (split[str].includes(':self')) {\r\n      split[str] = split[str].replace(':self', selfSelect())\r\n    } else {\r\n      split[str] = `${selfSelect()} ${split[str]}`\r\n    }\r\n  }\r\n  return split\r\n}\r\n","import { updateAttributes } from './update-attributes.js'\r\nimport { updateSlots } from './update-slots.js'\r\nimport { updateBody } from './update-body.js'\r\n\r\n/**\r\n * Update element's attributes, slots, and body\r\n * @param {...any} args\r\n * @param {ModjoolElement} args[0] - The custom element\r\n * @param {Object} args[1] - The custom element's options\r\n * @param {Boolean} args[2] - Ignore running lifecycle and force update\r\n */\r\nfunction updateAll (...args) {\r\n  updateAttributes(...args)\r\n  updateSlots(...args)\r\n  updateBody(...args)\r\n}\r\n\r\n/**\r\n * Updates mj.new properties, and then updates body\r\n * apiProp corresponds to the API property name, and newVal its new value\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} vals - Object containing new values\r\n */\r\nfunction updateNew (context, options, vals) {\r\n  for (const [apiProp, newVal] of Object.entries(vals)) {\r\n    context.mj.new[apiProp] = newVal\r\n    updateBody(context, options)\r\n  }\r\n}\r\n\r\nexport { updateAttributes, updateSlots, updateBody, updateAll, updateNew }\r\n","import { runLifecycle, kebabToCamel } from './utils.js'\r\nimport { updateBody, updateAttributes } from './update.js'\r\n\r\n/**\r\n * Gets current attributes, runs attribute lifecycle function, and updates body\r\n * Runs complete lifecycle function afterwards\r\n * \r\n * Runs when attributeChangedCallback is called, and an observed attribute is changed\r\n * \r\n * @param {ModjoolElement} context - The custom element to update\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} attr \r\n * @param {String} attr.attrName - Changed attribute name\r\n * @param {String} attr.oldVal - Old attribute value\r\n * @param {String} attr.newVal - New attribute value\r\n */\r\nfunction advanced (context, options, { attrName, oldVal = '', newVal = '' }) {\r\n  const args = [context, options]\r\n  if (context.mj.loaded && oldVal !== newVal) {\r\n    const lifecycleName = 'attr_' + kebabToCamel(attrName)\r\n    updateAttributes(...args)\r\n    runLifecycle(...args, lifecycleName, { oldVal, newVal })\r\n    if (!context.mj.runningLifecycle) {\r\n      updateBody(...args)\r\n      runLifecycle(...args, 'complete')\r\n    }\r\n  }\r\n}\r\n\r\nfunction simple () {}\r\n\r\nexport default { advanced, simple }\r\n","import { updateBody } from './update-body.js'\r\nimport { camelToKebab, runLifecycle } from './utils.js'\r\nimport attributeChanged from './changed.js'\r\n\r\n/**\r\n * Returns a new Proxy element, with a set proxy, attached to proxyObj\r\n * When proxyObj's value changed, set value of this element's corresponding attribute\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} proxyObj - The current attribute values\r\n */\r\nfunction attrProxy (context, options, proxyObj = {}) {\r\n  return new Proxy(proxyObj, {\r\n    set (obj, prop, value) {\r\n      if (!context.mj.settingAttributes) {\r\n        context.setAttribute(camelToKebab(prop), value)\r\n      }\r\n      return Reflect.set(...arguments)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Returns a new Proxy element, with a set proxy, attached to proxyObj\r\n * When proxyObj's value changed, if not running lifecycle:\r\n *  - Get result of dataDataNameHook\r\n *  - Set if value returned, otherwise use value\r\n *  - Update the body\r\n *  - Run complete() lifecycle event\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} proxyObj - The current attribute values\r\n */\r\nfunction dataProxy (context, options, proxyObj = {}) {\r\n  return new Proxy(proxyObj, {\r\n    set (obj, prop, value) {\r\n      if (context.mj.dataInit) {\r\n        return Reflect.set(...arguments)\r\n      }\r\n      const dataHookVal = runLifecycle(context, options, 'data_' + prop, {\r\n        oldVal: obj[prop],\r\n        newVal: value\r\n      })\r\n\r\n      let result\r\n\r\n      // Only sets if not null or undefined\r\n      if (dataHookVal != null) {\r\n        result = Reflect.set(obj, prop, dataHookVal)\r\n      } else {\r\n        result = Reflect.set(...arguments)\r\n      }\r\n\r\n      if (!context.mj.runningLifecycle) {\r\n        updateBody(context, options)\r\n        runLifecycle(context, options, 'complete')\r\n      }\r\n      return result\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Returns an observing MutationObserver that passes\r\n * attributes changed to the default advanced element handler\r\n * for attributeChangedCallback.\r\n *\r\n * MutationObserver only watches for attribute changes to the\r\n * context element, and not changes to its children or other events.\r\n *\r\n * Limitation: MutationObserver is async; reactive attributes still called\r\n * within complete() due do this.\r\n *\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @returns {MutationObserver} - The observing MutationObserver\r\n */\r\nfunction attrObserver (context, options) {\r\n  const observer = new MutationObserver(mutationList => {\r\n    mutationList.forEach(mutation => {\r\n      if (mutation.type === 'attributes' && context.mj.loaded) {\r\n        attributeChanged.advanced(context, options, {\r\n          attrName: mutation.attributeName,\r\n          oldVal: mutation.oldValue,\r\n          newVal: context.getAttribute(mutation.attributeName)\r\n        })\r\n      }\r\n    })\r\n  })\r\n\r\n  // Start observing\r\n  observer.observe(context, {\r\n    // Watch for attribute change\r\n    attributes: true,\r\n    // Save old values\r\n    attributeOldValue: true\r\n  })\r\n\r\n  return observer\r\n}\r\n\r\nexport { dataProxy, attrProxy, attrObserver }\r\n","/**\r\n * Returns a series of functions passed to instance, for use in the modjool API\r\n * Functions: get, when, on, array, for\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @returns {Object} - The object containing the functions\r\n */\r\nexport default function (context, options) {\r\n  return {\r\n    /**\r\n     * A shorter query selector\r\n     * @param {String} el - CSS selector\r\n     * @returns {HTMLElement} -  Query selector result\r\n     */\r\n    get (el) {\r\n      return context.mj.body.querySelector(el)\r\n    },\r\n\r\n    /**\r\n     * Quick event listener - when 'el' does 'event' run 'func'\r\n     * @param {String} el - CSS selector\r\n     * @param {String} event - JS event name\r\n     * @param {Function} func - Function to be run\r\n     * @returns {Object} - A event return object\r\n     */\r\n    when (el, event, func) {\r\n      const theEl = this.get(el)\r\n      theEl.addEventListener(event, func)\r\n      return eventReturn(theEl, event, func)\r\n    },\r\n\r\n    /**\r\n     * Quick event listener for context - when 'context' does 'event' run 'func'\r\n     * @param {String} event - JS event name\r\n     * @param {Function} func - Function to be run\r\n     * @returns {Object} - A event return object\r\n     */\r\n    on (event, func) {\r\n      context.mj.body.addEventListener(event, func)\r\n      return eventReturn(context.mj.body, event, func)\r\n    },\r\n\r\n    // Converts 'list' to array\r\n    /**\r\n     * Takes a list and convert it to an array\r\n     * @param {String} list - A comma separated list\r\n     * @returns {Array} - Converted list\r\n     */\r\n    array (list) {\r\n      const rep = '{{@#MJ[]£=+}}'\r\n      const arr = list.replace('/,', rep).split(',')\r\n      for (const index in arr) {\r\n        arr[index] = arr[index].replace(rep, ',')\r\n      }\r\n      return arr\r\n    },\r\n\r\n    /**\r\n     * Takes a comma separated list, converts to array, runs function on each\r\n     * Add all functions results together, and returns\r\n     * @param {String} list - A comma separated list\r\n     * @param {Function} func - Function to be run\r\n     * @returns {String} - Result of function, joined\r\n     */\r\n    for (list, func = a => a) {\r\n      const theList = Array.isArray(list) ? list : this.array(list)\r\n      let result = ''\r\n      for (const index in theList) {\r\n        result += func(theList[index], index)\r\n      }\r\n      return result\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns an object that allows for easy removing of set event listeners\r\n * @param {HTMLElement} el - The element \r\n * @param {String} event - JS Event name\r\n * @param {Function} func - The function to be removed\r\n */\r\nfunction eventReturn (el, event, func) {\r\n  return {\r\n    element: el,\r\n    type: event,\r\n    function: func,\r\n    stop () {\r\n      el.removeEventListener(event, func)\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Blocked keywords, not allowed as custom HTML attributes\r\n */\r\nexport default [\r\n  'tag',\r\n  // 'attr',\r\n  'shadowDom',\r\n  'reactive',\r\n  'modjoolId',\r\n  'unhide',\r\n  'scopedCss',\r\n  'enter',\r\n  'data',\r\n  'ready',\r\n  'js',\r\n  'complete',\r\n  'leave',\r\n  'html',\r\n  'css',\r\n]\r\n","import { updateBody, updateSlots, updateAll, updateNew, updateAttributes } from './update.js'\r\nimport { attrObserver, attrProxy, dataProxy } from './proxies'\r\nimport { runLifecycle, findFunction } from './utils.js'\r\nimport instanceFunctions from './functions.js'\r\nimport keywords from '../config/keywords.js'\r\n\r\n/**\r\n * Initialises the custom element's mj property, builds shadow DOM,\r\n * then runs enter() lifecycle event\r\n * \r\n * Runs when the custom element's constructor is called\r\n * \r\n * Properties of mj to note: \r\n *   - body, refers to the shadow DOM (if enabled), or the current element\r\n *   - instance, the object sent to the modjool custom element hooks\r\n *     - Includes attr, data, func, self, slot, slotVal\r\n *     - Self contains a number of methods relating to the current body of the element\r\n *   - new, if new API values have been manually set for the element, they are here\r\n * \r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction advanced (context, options) {\r\n  const instanceId = Math.random().toString(36).slice(-6)\r\n  const selector = function (rule = '') {\r\n    if (options.shadowDom) {\r\n      return `:host(${options.tag}[mj-id=\"${instanceId}\"]${rule})`\r\n    } else {\r\n      return `${options.tag}[mj-id=\"${instanceId}\"]${rule}`\r\n    }\r\n  }\r\n  context.mj = {}\r\n  context.mj = {\r\n    tag: options.tag,\r\n    id: instanceId,\r\n    attributes: {},\r\n    observer: {},\r\n    body: {},\r\n    bodyContent: '',\r\n    styleContent: '',\r\n    currentBody: '',\r\n    runningLifecycle: false,\r\n    settingAttributes: false,\r\n    loaded: false,\r\n    reactiveAttributes: options.attributes,\r\n    instance: {\r\n      attr: {},\r\n      data: {},\r\n      elem: {},\r\n      find: findFunction(context, options),\r\n      findAll: findFunction(context, options, true),\r\n      func: instanceFunctions(context, options),\r\n      self: {\r\n        id: instanceId,\r\n        tag: options.tag,\r\n        options: options,\r\n        select: selector,\r\n        element: {},\r\n        update: () => {\r\n          updateBody(context, options, true)\r\n          if (!context.mj.runningLifecycle) {\r\n            runLifecycle(context, options, 'complete')\r\n          }\r\n        },\r\n        updateSlot: () => updateSlots(context, options),\r\n        updateAttr: () => updateAttributes(context, options),\r\n        updateAll: () => {\r\n          updateAll(context, options, true)\r\n          if (!context.mj.runningLifecycle) {\r\n            runLifecycle(context, options, 'complete')\r\n          }\r\n        },\r\n        remove: () => context.mj.body.host ? context.mj.body.host.remove() : context.mj.body.remove(),\r\n        css: css => updateNew(context, options, { css }),\r\n        data: data => updateNew(context, options, { data }),\r\n        enter: enter => updateNew(context, options, { enter }),\r\n        html: html => updateNew(context, options, { html }),\r\n        js: js => updateNew(context, options, { js }),\r\n        complete: complete => updateNew(context, options, { complete }),\r\n        leave: leave => updateNew(context, options, { leave }),\r\n        ready: ready => updateNew(context, options, { ready }),\r\n        attrHook: (attrName, func) => {\r\n          // If custom attribute set, and no custom attr observed, then create\r\n          if (!options.attr.length && !context.mj.observer) {\r\n            context.mj.observer = attrObserver(context, options)\r\n          }\r\n          updateNew(context, options, { ['attr_' + attrName]: func })\r\n        },\r\n        dataHook: (dataName, func) => {\r\n          updateNew(context, options, { ['data_' + dataName]: func })\r\n        }\r\n      },\r\n      slot: {},\r\n      slotVal: {}\r\n    },\r\n    new: {\r\n      css: null,\r\n      data: null,\r\n      enter: null,\r\n      html: null,\r\n      js: null,\r\n      leave: null,\r\n      ready: null,\r\n    },\r\n    options: options\r\n  }\r\n\r\n  // Set mj-id attribute, if enabled\r\n  if (options.modjoolId) {\r\n    context.setAttribute('mj-id', context.mj.id)\r\n  }\r\n\r\n  // Create reactive features\r\n  if (options.reactive) {\r\n    // Create attr & data instance param proxies\r\n    context.mj.instance.attr = attrProxy(context, options, {})\r\n    context.mj.instance.data = dataProxy(context, options, {})\r\n\r\n    // Create attribute MutationObserver if reactive attr not set manually\r\n    if (!options.attr.length && optionsContainsCustomHook(options)) {\r\n      context.mj.observer = attrObserver(context, options)\r\n    }\r\n  }\r\n\r\n  // Create shadow DOM, if enabled\r\n  if (options.shadowDom) {\r\n    context.attachShadow({ mode: 'open' })\r\n    context.mj.body = context.shadowRoot\r\n  } else {\r\n    context.mj.body = context\r\n  }\r\n\r\n  // If shadow DOM, set self.element to the host (the element containing the shadow DOM)\r\n  context.mj.instance.self.element = context.mj.body.host ? context.mj.body.host : context.mj.body\r\n  context.mj.instance.elem = context.mj.instance.self.element\r\n\r\n  // Constructor complete, run \"enter\" lifecycle\r\n  context.mj.constructorRun = true\r\n  runLifecycle(context, options, 'enter')\r\n}\r\n\r\nfunction simple () {}\r\n\r\nexport default { advanced, simple }\r\n\r\nfunction optionsContainsCustomHook (options) {\r\n  for (const option of Object.keys(options)) {\r\n    if (!keywords.includes(option)) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n","import keywords from '../config/keywords.js'\r\n\r\n/**\r\n * If attributes set in options, retrieve and pass to browser for observation\r\n * Runs when observedAttributes is called, before element construction\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n * @returns {Array} - Array of observed attributes\r\n */\r\nfunction advanced (context, options) {\r\n  if (options.attr !== undefined) {\r\n    return options.attr.map(attr => {\r\n      attr = attr.toLowerCase()\r\n      if (!keywords.includes(attr)) {\r\n        return attr\r\n      } else {\r\n        console.error(`[Modjool] ERROR: Keyword used as element attribute name [${attr}]`)\r\n      }\r\n    })\r\n  } else {\r\n    return []\r\n  }\r\n}\r\n\r\nfunction simple () {}\r\n\r\nexport default { advanced, simple }\r\n","import { runLifecycle } from './utils.js'\r\nimport { updateBody } from './update-body.js'\r\n\r\n/**\r\n * Runs js() lifecycle event, if it exists, with an extra property indicating it has been adopted\r\n * Then run complete()\r\n * Runs when adoptedCallback has been called, and element has been moved to another document\r\n * @param {ModjoolElement} context - The custom element to update\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction advanced (context, options) {\r\n  if (runLifecycle(context, options, 'js', { adopted: true }) !== null) {\r\n    updateBody(context, options)\r\n  }\r\n  runLifecycle(context, options, 'complete')\r\n}\r\n\r\nfunction simple () { }\r\n\r\nexport default { advanced, simple }\r\n","import state from '../state.js'\r\nimport { runLifecycle } from './utils.js'\r\nimport { updateBody, updateSlots, updateAttributes } from './update.js'\r\n\r\n/**\r\n * Initialises the custom element, after it's added to the page\r\n * Runs when connectedCallback is called, and element is added to DOM\r\n * \r\n * Execution process:\r\n *   1. Wait for parents to be defined\r\n *   2. Get attributes, slots, data\r\n *   3. Run ready() lifecycle event, and update body (get html() and css())\r\n *   4. Unhide element if enabled, context.mj.loaded = true\r\n *   5. If js() used, run js() lifecycle event if given, then update body again\r\n *   6. Run complete() lifecycle event\r\n *   7. Add to defined elements, and dispatch mj-defined custom event\r\n * \r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction advanced (context, options) {\r\n  const args = [context, options]\r\n  if (!context.mj.alreadyConnected) {\r\n    context.mj.alreadyConnected = true\r\n\r\n    if (!options.shadowDom) {\r\n      waitForParentElements(context, () => connectToDom())\r\n    } else {\r\n      connectToDom()\r\n    }\r\n\r\n    function connectToDom () {\r\n      context.mj.bodyContent = context.innerHTML\r\n      updateAttributes(...args)\r\n      updateSlots(...args)\r\n      setData(...args, context.mj.new.data || runLifecycle(context, options, 'data') || {})\r\n      runLifecycle(context, options, 'ready')\r\n      updateBody(...args)\r\n      \r\n      unhideElement(...args)\r\n      context.mj.loaded = true\r\n\r\n      runLifecycle(context, options, 'js')\r\n      runReactiveHooks(context, options)\r\n      updateBody(context, options)\r\n\r\n      runLifecycle(context, options, 'complete')\r\n      state.addElement(context)\r\n      context.dispatchEvent(new Event('mj-defined'))\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Adds element to list of elements, dispatches mj-defined custom event\r\n * Runs when simple element is connected to DOM\r\n * @param {ModjoolElement} context - the custom element to update\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction simple (context, options) {\r\n  context.mj = {}\r\n  context.mj.tag = options.tag\r\n  state.addElement(context)\r\n  context.dispatchEvent(new Event('mj-defined'))\r\n}\r\n\r\nexport default { advanced, simple }\r\n\r\n/**\r\n * Runs all attr_[name] and data_[prop] functions, in that order\r\n * Updates data properties if value returned\r\n * @param {ModjoolElement} context - the custom element to update\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction runReactiveHooks (context, options) {\r\n  if (context.mj.instance) {\r\n    context.mj.runningLifecycle = true\r\n    runAttr()\r\n    runData()\r\n    context.mj.runningLifecycle = false\r\n  }\r\n\r\n  // Iterate through attributes, run lifecycle for each\r\n  function runAttr () {\r\n    for (let name in context.mj.attributes) {\r\n      const lifecycleName = 'attr_' + name\r\n      const attrValue = context.mj.attributes[name]\r\n      runLifecycle(context, options, lifecycleName, {\r\n        newVal: attrValue\r\n      })\r\n    }\r\n  }\r\n\r\n  // Iterate through data properties, run lifecycle for each, set new value\r\n  function runData () {\r\n    context.mj.dataInit = true\r\n    for (let prop in context.mj.instance.data) {\r\n      const lifecycleName = 'data_' + prop\r\n      const dataValue = context.mj.instance.data[prop]\r\n      const dataHookVal  = runLifecycle(context, options, lifecycleName, {\r\n        newVal: dataValue\r\n      })\r\n\r\n      // Only sets if not null or undefined\r\n      if (dataHookVal != null) {\r\n        context.mj.instance.data[prop] = dataHookVal\r\n      }\r\n    }\r\n    context.mj.dataInit = false\r\n  }\r\n}\r\n\r\n/**\r\n * Iterates through data and sets the same values to mj.instance.data\r\n * @param {ModjoolElement} context - the custom element to update\r\n * @param {Object} options - The custom element's options\r\n * @param {Object} data - The new data value\r\n */\r\nfunction setData (context, options, data) {\r\n  if (data === null) {\r\n    return null\r\n  }\r\n\r\n  context.mj.dataInit = true\r\n  for (const [prop, val] of Object.entries(data)) {\r\n    context.mj.instance.data[prop] = val\r\n  }\r\n  context.mj.dataInit = false\r\n}\r\n\r\n/**\r\n * Waits for parent elements to define themselves, before running func.\r\n * Execution process:\r\n *   1. If constructor already run, continue, else do nothing and finish\r\n *   2. If element has any non-defined custom element parents, run func and finish\r\n *   3. Add mj-defined custom event to non-defined parent element\r\n *   4. When parent executes mj-defined, recursively check for more parents\r\n *   5. Repeat until finish\r\n * @param {ModjoolElement} context\r\n * @param {Function} func - Function to be run when ready\r\n */\r\nfunction waitForParentElements (context, func) {\r\n  if (context.mj.constructorRun) {\r\n    try {\r\n      const closest = context.closest(':not(:defined)')\r\n      if (closest === null) {\r\n        func()\r\n      } else {\r\n        const definedFunc = () => {\r\n          // Check for more non-defined elements\r\n          waitForParentElements(context, func)\r\n          // When called, remove this listener from newly defined parent\r\n          closest.removeEventListener('mj-defined', definedFunc)\r\n        }\r\n        // Wait for parent element to be defined, then call definedFunc\r\n        closest.addEventListener('mj-defined', definedFunc)\r\n      }\r\n    } catch (err) {\r\n      // If warning not already logged\r\n      if (!state.warnings.includes(':defined') && err.toString().includes(':defined')) {\r\n        state.warnings.push(':defined')\r\n        console.warn('[Modjool] Browser does not support :defined CSS selector, possible custom element nesting bugs')\r\n        func()\r\n      } else {\r\n        console.error(err)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * If options.unhide is true, unhide object by removing hidden attribute\r\n * @param {ModjoolElement} context \r\n * @param {Object} options \r\n */\r\nfunction unhideElement (context, options) {\r\n  if (options.unhide) {\r\n    context.removeAttribute('hidden')\r\n  }\r\n}\r\n","import state from '../state.js'\r\nimport { runLifecycle } from './utils.js'\r\n\r\n/**\r\n * Runs the leave() lifecycle event, empties body & mj, removes element from state\r\n * Runs when disconnectedCallback is called, and element is removed from DOM\r\n * @param {ModjoolElement} context - The custom element\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction advanced (context, options) {\r\n  runLifecycle(context, options, 'leave')  \r\n  context.mj.body.innerHTML = ''\r\n  if (context.mj.observer && context.mj.observer.disconnect) {\r\n    context.mj.observer.disconnect()\r\n  }\r\n  context.mj = {}\r\n  state.removeElement(context)\r\n}\r\n\r\n/**\r\n * Removes element from state\r\n * Runs when disconnectedCallback is called, and element is removed from DOM\r\n * @param {ModjoolElement} context - The custom element to update\r\n * @param {Object} options - The custom element's options\r\n */\r\nfunction simple (context, options) {\r\n state.removeElement(context)\r\n}\r\n\r\nexport default { advanced, simple }\r\n","import state from './state.js'\r\nimport whenReady from './whenready.js'\r\nimport { updateBody, updateSlots } from './methods/update.js'\r\n\r\nimport CONSTRUCTOR from './methods/constructor.js'\r\nimport OBSERVE from './methods/observe.js'\r\nimport ADOPTED from './methods/adopted.js'\r\nimport CHANGED from './methods/changed.js'\r\nimport CONNECTED from './methods/connected.js'\r\nimport DISCONNECTED from './methods/disconnected.js'\r\n\r\n/**\r\n * Creates a ModjoolElement class, and defines it.\r\n * All methods call either an advanced or simple function, depending on type.\r\n * @param {Object|String} options - Options for this element, a tag name string if simple\r\n * @param {Boolean} advancedApi - True if advanced API used, false if not\r\n * @returns {Boolean} - True if element successfully defined, false if not\r\n */\r\nfunction elementCreator (options, advancedApi) {\r\n  const elementType = advancedApi ? 'advanced' : 'simple'\r\n  \r\n  class ModjoolElement extends HTMLElement {\r\n    // Invoked instantly\r\n    constructor (...args) {\r\n      const polyfill = super(...args)\r\n      CONSTRUCTOR[elementType](this, options)\r\n      return polyfill\r\n    }\r\n\r\n    // Invoked directly after constructor\r\n    static get observedAttributes () {\r\n      return OBSERVE[elementType](this, options)\r\n    }\r\n\r\n    // Invoked when observed attribute is changed\r\n    attributeChangedCallback (attrName, oldVal, newVal) {\r\n      CHANGED[elementType](this, options, { attrName, oldVal, newVal })\r\n    }\r\n\r\n    // Invoked when element added to DOM\r\n    connectedCallback () {\r\n      CONNECTED[elementType](this, options)\r\n    }\r\n\r\n    // Invoked when element moved to new document\r\n    adoptedCallback () {\r\n      ADOPTED[elementType](this, options)\r\n    }\r\n\r\n    // Invoked when element removed from DOM\r\n    disconnectedCallback () {\r\n      DISCONNECTED[elementType](this, options)\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (elementType === 'advanced') {\r\n      // If advanced element, define element with options.tag\r\n      customElements.define(options.tag, ModjoolElement)\r\n      return !!customElements.get(options.tag)\r\n    } else {\r\n      // If simple element, define element with options (the tag name string)\r\n      customElements.define(options, ModjoolElement)\r\n      return !!customElements.get(options)\r\n    }\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n}\r\n\r\n/**\r\n * Combines options with default, waits until page is ready, then runs elementCreator\r\n * @param {Boolean} advancedApi - True if advanced API used, false if not\r\n * @param {Object|String} options - Options for this element, a tag name string if simple\r\n * @returns {Boolean} - True if element successfully defined, false if not\r\n */\r\nexport default function (options, advancedApi) {\r\n  if (advancedApi) {\r\n    options = { ...state.config, ...options }\r\n  }\r\n  return whenReady(() => elementCreator(options, advancedApi))\r\n}\r\n","import state from './state.js'\r\nimport createElement from './create.js'\r\nimport ModjoolElement from './element.js'\r\n\r\nexport default { \r\n  create,\r\n  createUndefined,\r\n  options, \r\n  get, \r\n  getAsync, \r\n  getUndefined, \r\n  getUndefinedAsync,\r\n  complete,\r\n  wait\r\n}\r\n\r\n/**\r\n * Creates one or more Modjool elements, using the advanced or simple API\r\n * @param  {...Array|Object|String} options - One of four inputs:\r\n *   1. An array of objects for the advanced API\r\n *   2. An array of strings for the simple API\r\n *   3. A single object for the advanced API\r\n *   4. A single string for the simple API\r\n * @returns {Boolean} - True if successful, false if not\r\n */\r\nfunction create (...options) {\r\n  return createElement(ModjoolElement, options)    \r\n}\r\n\r\n/**\r\n * Defines all non-defined custom elements\r\n * @returns {Boolean} - True if successful, false if not\r\n */\r\nfunction createUndefined () {\r\n  return createElement(ModjoolElement, [])\r\n}\r\n\r\n/**\r\n * Set the default options for all following modjool.create() calls. Options are merged\r\n * with the default options.\r\n * @param {Object} defaults - Options to apply\r\n * @returns {Object} - The current options, after merging\r\n */\r\nfunction options (defaults) {\r\n  state.config = { ...state.config,  ...defaults }\r\n  return state.config\r\n}\r\n\r\n/**\r\n * Returns a list of elements that are  defined, and currently attached to the DOM,\r\n * that match the elementTag. If no argument, return all currently defined elements\r\n * @param {String} elementTag - The tag of the custom element\r\n * @returns {Array} - Array of selected elements\r\n */\r\nfunction get (className = false) {\r\n  return state.getElements(className)\r\n}\r\n\r\n/**\r\n * Returns a promise, resolving with the result of modjool.get(), after all custom\r\n * elements have loaded to the DOM\r\n * @param {String} elementTag - The tag of the custom element\r\n * @returns {Promise<Array>} - Promise resolving with the array of selected elements\r\n */\r\nfunction getAsync (className) {\r\n  return wait().then(() => get(className))\r\n}\r\n\r\n/**\r\n * Returns a list of all currently undefined elements\r\n * @returns {NodeList} - A non-live NodeList containing all matched elements\r\n */\r\nfunction getUndefined () {\r\n  return document.querySelectorAll(':not(:defined)')\r\n}\r\n\r\n/**\r\n * Returns a promise, resolving with the result of modjool.getUndefined(), after all\r\n * custom elements have loaded to the DOM\r\n * @returns {Promise<Array>} - Promise resolving with the array of selected elements\r\n */\r\nfunction getUndefinedAsync () {\r\n  return wait().then(() => getUndefined())\r\n}\r\n\r\n/**\r\n * Runs func after all Modjool elements have loaded\r\n * @param {Function} func - Function to run\r\n */\r\nfunction complete (func) {\r\n  wait().then(() => func())\r\n}\r\n\r\n/**\r\n * Returns a promose that waits until all Modjool elements have been loaded, then resolves\r\n * @returns {Promise} - Promsie that resolves when Modjool loaded\r\n */\r\nfunction wait () {\r\n  return new Promise((resolve, reject) => {\r\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\r\n      setTimeout(() => {\r\n        resolve()\r\n      }, 0)\r\n    } else {\r\n      document.addEventListener('DOMContentLoaded', () => {\r\n        setTimeout(() => {\r\n          resolve()\r\n        }, 1)\r\n      })\r\n    }\r\n  })\r\n}\r\n"],"names":["config","tag","attr","shadowDom","modjoolId","scopedCss","unhide","reactive","enter","undefined","ready","js","complete","leave","html","css","warnings","classes","elements","addElement","newElement","push","removeElement","oldElement","this","filter","el","getElements","elementTag","mj","func","document","readyState","addEventListener","createElement","options","length","Array","isArray","whenReady","defineAll","result","option","createSingle","every","res","String","list","querySelectorAll","includes","tagName","toLowerCase","nodeName","localName","runLifecycle","apiProp","extra","alreadyRunningLifecycle","runningLifecycle","new","instance","findFunction","context","findAll","strings","str","i","body","querySelector","kebabToCamel","kebabCamelCache","camelToKebab","camelCache","kebabCache","replace","split","map","item","index","charAt","toUpperCase","slice","join","updateAttributes","isConnected","settingAttributes","attributes","prop","startsWith","val","nodeValue","Object","keys","entries","key","setAttr","updateSlots","slot","slotVal","tempId","slotList","htmlString","id","frag","createDocumentFragment","elem","innerHTML","appendChild","bodyContent","s","slotName","getAttribute","outerHTML","shadowSlot","getSlotContent","slotConnected","updateBody","ignoreLifecycle","newHtml","getHtml","newCss","getCss","newBody","currentBody","bodyFrag","addHtml","addCss","deleteElementHtml","tempEl","content","selfSelect","selectorRegex","cssTag","setAttribute","textContent","self","select","match","part","trimStart","regex","regRes","doCommaLoop","styleContent","firstChild","removeChild","updateNew","vals","newVal","advanced","attrName","oldVal","args","loaded","lifecycleName","simple","attrObserver","observer","MutationObserver","mutationList","forEach","mutation","type","attributeChanged","attributeName","oldValue","observe","attributeOldValue","get","when","event","theEl","eventReturn","on","array","rep","arr","for","a","theList","element","function","stop","removeEventListener","instanceId","Math","random","toString","reactiveAttributes","data","find","instanceFunctions","rule","update","updateSlot","updateAttr","updateAll","remove","host","attrHook","dataHook","dataName","Proxy","set","obj","value","Reflect","arguments","attrProxy","dataInit","dataHookVal","dataProxy","keywords","optionsContainsCustomHook","attachShadow","mode","shadowRoot","constructorRun","console","error","adopted","alreadyConnected","connectToDom","setData","removeAttribute","unhideElement","runAttr","runData","name","attrValue","dataValue","runReactiveHooks","state","dispatchEvent","Event","waitForParentElements","closest","definedFunc","err","warn","disconnect","advancedApi","elementType","ModjoolElement","HTMLElement","constructor","polyfill","super","CONSTRUCTOR","OBSERVE","attributeChangedCallback","CHANGED","connectedCallback","CONNECTED","adoptedCallback","ADOPTED","disconnectedCallback","DISCONNECTED","customElements","define","elementCreator","className","getUndefined","wait","Promise","resolve","reject","setTimeout","create","createUndefined","defaults","getAsync","then","getUndefinedAsync"],"mappings":"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"}