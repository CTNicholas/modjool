{"version":3,"file":"modjool-lite.js","sources":["../src/modjool/whenready.js","../src/modjool/create.js","../src/modjool/modjoolLite.js"],"sourcesContent":["/**\r\n * Runs func when the entire DOM has loaded\r\n * @param {Function} func - The function to be run\r\n */\r\nexport default function (func) {\r\n  if (document.readyState === 'interactive' || document.readyState === 'complete') {\r\n    return func()\r\n  } else {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n      return func()\r\n    })\r\n  }\r\n}\r\n","import whenReady from './whenready.js'\r\n/**\r\n * Creates one, or a number, of custom elements, using createElement\r\n * Execution process:\r\n *   1. If options not passed, define all elements not currently defined, return true\r\n *   2. If array passed, define all elements, return array of html tags\r\n *   3. Else, create single element, if successful, return custom html tag\r\n * @param {HTMLElement} createElement - ModjoolElement or ModjoolLiteElement\r\n * @param {Object|Array|String} options - Options provided by modjool.create()\r\n * @returns {Boolean|Array|String} - See above. All 3 processes return false if failed\r\n */\r\nexport default function (createElement, options = []) {\r\n  options = options.length === 1 ? options[0] : options\r\n  if (Array.isArray(options)) {\r\n    if (options.length === 0) {\r\n      return whenReady(() => defineAll(createElement)) || false\r\n    }\r\n    const result = []\r\n    for (const option of options) {\r\n      result.push(createSingle(createElement, option))\r\n    }\r\n    return result.every(res => res === true) ? options : false\r\n  } else {\r\n    return createSingle(createElement, options) ? options.tag : false\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a single ModjoolElement or ModjoolLiteElement. If a string is passed as options,\r\n * send false to createElement(), to denote a simple API call.\r\n * @param {HTMLElement} createElement  - ModjoolElement or ModjoolLiteElement\r\n * @param {Object|String} options - Options provided by modjool.create()\r\n * @returns {Boolean} - True if successful, false if not\r\n */\r\nfunction createSingle (createElement, options) {\r\n  const isString = typeof options === 'string' || options instanceof String\r\n  return createElement(options, !isString)\r\n}\r\n\r\n/**\r\n * Finds all non-defined custom elements, and defines them using createSingle()\r\n * @param {HTMLElement} createElement  - ModjoolElement or ModjoolLiteElement\r\n * @returns {Array} - List of all successfully defined custom element tag names\r\n */\r\nfunction defineAll(createElement) {\r\n  const notDefined = document.querySelectorAll(':not(:defined)')\r\n  const list = []\r\n  for (const el of notDefined) {\r\n    if (!list.includes(el.tagName)) {\r\n      createSingle(createElement, el.tagName.toLowerCase() || el.nodeName.toLowerCase() ||el.localName)\r\n      list.push(el.tagName)\r\n    }\r\n  }\r\n  return list\r\n}\r\n","/* global customElements, HTMLElement */\r\nimport createElement from './create.js'\r\n\r\nexport default { create }\r\n\r\n/**\r\n * Creates one or more ModjoolLite elements, using the ModjoolLite API\r\n * @param  {...Array|String} options - One of two inputs:\r\n *   1. An array of strings for the simple API\r\n *   2. A single string for the simple API\r\n * @returns {Boolean} - True if successful, false if not\r\n */\r\nfunction create (...options) {\r\n  return createElement(modjoolLiteElement, options)    \r\n}\r\n\r\n/**\r\n * Creates and defines a ModjoolLite element\r\n * @param {String} elementName - The tag of the custom element\r\n * @returns {Boolean} - True if successful, false if not\r\n */\r\nfunction modjoolLiteElement (elementName) {\r\n  class ModjoolLiteElement extends HTMLElement {\r\n    constructor (...args) {\r\n      const polyfill = super(...args)\r\n      return polyfill\r\n    }\r\n  }\r\n  customElements.define(elementName, ModjoolLiteElement)\r\n  return !!customElements.get(elementName)\r\n}\r\n"],"names":["func","document","readyState","addEventListener","createElement","options","length","Array","isArray","whenReady","defineAll","result","option","push","createSingle","every","res","tag","String","list","querySelectorAll","el","includes","tagName","toLowerCase","nodeName","localName","modjoolLiteElement","elementName","ModjoolLiteElement","HTMLElement","constructor","super","customElements","define","get","create"],"mappings":"4/BAIe,WAAUA,MACK,gBAAxBC,SAASC,YAAwD,aAAxBD,SAASC,kBAC7CF,IAEPC,SAASE,iBAAiB,mBAAoB,IACrCH,KCEE,WAAUI,OAAeC,yDAAU,MAChDA,EAA6B,IAAnBA,EAAQC,OAAeD,EAAQ,GAAKA,EAC1CE,MAAMC,QAAQH,GAAU,IACH,IAAnBA,EAAQC,cACHG,EAAU,IAAMC,EAAUN,MAAmB,QAEhDO,EAAS,OACMN,kCAAS,KAAnBO,UACTD,EAAOE,KAAKC,EAAaV,EAAeQ,2CAEnCD,EAAOI,MAAMC,IAAe,IAARA,IAAgBX,UAEpCS,EAAaV,EAAeC,IAAWA,EAAQY,IAW1D,SAASH,EAAcV,EAAeC,UAE7BD,EAAcC,IADe,iBAAZA,GAAwBA,aAAmBa,SASrE,SAASR,EAAUN,SAEXe,EAAO,OADMlB,SAASmB,iBAAiB,kDAEhB,KAAlBC,UACJF,EAAKG,SAASD,EAAGE,WACpBT,EAAaV,EAAeiB,EAAGE,QAAQC,eAAiBH,EAAGI,SAASD,eAAgBH,EAAGK,WACvFP,EAAKN,KAAKQ,EAAGE,gDAGVJ,EChCT,SAASQ,EAAoBC,SACrBC,UAA2BC,YAC/BC,qBACmBC,4BAIrBC,eAAeC,OAAON,EAAaC,KAC1BI,eAAeE,IAAIP,SA1Bf,CAAEQ,OASjB,sCAAoB/B,2BAAAA,yBACXD,EAAcuB,EAAoBtB"}